/* 
 * Engines API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: 2
 * Contact: analytics.api.support@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.AnalyticsAPI.Engines.Client.OpenAPIDateConverter;

namespace FactSet.AnalyticsAPI.Engines.Model
{
    /// <summary>
    /// PAComponent
    /// </summary>
    [DataContract]
    public partial class PAComponent :  IEquatable<PAComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PAComponent" /> class.
        /// </summary>
        /// <param name="id">Component identifier..</param>
        /// <param name="currencyisocode">currencyisocode.</param>
        /// <param name="dates">dates.</param>
        /// <param name="snapshot">Is the component type snapshot or subperiod..</param>
        /// <param name="name">Component name..</param>
        /// <param name="category">Component category..</param>
        public PAComponent(string id = default(string), string currencyisocode = default(string), PADateParameters dates = default(PADateParameters), bool snapshot = default(bool), string name = default(string), string category = default(string))
        {
            this.Id = id;
            this.Currencyisocode = currencyisocode;
            this.Dates = dates;
            this.Snapshot = snapshot;
            this.Name = name;
            this.Category = category;
        }
        
        /// <summary>
        /// Component identifier.
        /// </summary>
        /// <value>Component identifier.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// List of accounts saved in the PA document.
        /// </summary>
        /// <value>List of accounts saved in the PA document.</value>
        [DataMember(Name="accounts", EmitDefaultValue=false)]
        public List<PAIdentifier> Accounts { get; private set; }

        /// <summary>
        /// List of benchmarks saved in the PA document.
        /// </summary>
        /// <value>List of benchmarks saved in the PA document.</value>
        [DataMember(Name="benchmarks", EmitDefaultValue=false)]
        public List<PAIdentifier> Benchmarks { get; private set; }

        /// <summary>
        /// Gets or Sets Currencyisocode
        /// </summary>
        [DataMember(Name="currencyisocode", EmitDefaultValue=false)]
        public string Currencyisocode { get; set; }

        /// <summary>
        /// Gets or Sets Dates
        /// </summary>
        [DataMember(Name="dates", EmitDefaultValue=false)]
        public PADateParameters Dates { get; set; }

        /// <summary>
        /// Is the component type snapshot or subperiod.
        /// </summary>
        /// <value>Is the component type snapshot or subperiod.</value>
        [DataMember(Name="snapshot", EmitDefaultValue=false)]
        public bool Snapshot { get; set; }

        /// <summary>
        /// Component name.
        /// </summary>
        /// <value>Component name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Component category.
        /// </summary>
        /// <value>Component category.</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PAComponent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("  Benchmarks: ").Append(Benchmarks).Append("\n");
            sb.Append("  Currencyisocode: ").Append(Currencyisocode).Append("\n");
            sb.Append("  Dates: ").Append(Dates).Append("\n");
            sb.Append("  Snapshot: ").Append(Snapshot).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PAComponent);
        }

        /// <summary>
        /// Returns true if PAComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of PAComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PAComponent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Accounts == input.Accounts ||
                    this.Accounts != null &&
                    input.Accounts != null &&
                    this.Accounts.SequenceEqual(input.Accounts)
                ) && 
                (
                    this.Benchmarks == input.Benchmarks ||
                    this.Benchmarks != null &&
                    input.Benchmarks != null &&
                    this.Benchmarks.SequenceEqual(input.Benchmarks)
                ) && 
                (
                    this.Currencyisocode == input.Currencyisocode ||
                    (this.Currencyisocode != null &&
                    this.Currencyisocode.Equals(input.Currencyisocode))
                ) && 
                (
                    this.Dates == input.Dates ||
                    (this.Dates != null &&
                    this.Dates.Equals(input.Dates))
                ) && 
                (
                    this.Snapshot == input.Snapshot ||
                    this.Snapshot.Equals(input.Snapshot)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Accounts != null)
                    hashCode = hashCode * 59 + this.Accounts.GetHashCode();
                if (this.Benchmarks != null)
                    hashCode = hashCode * 59 + this.Benchmarks.GetHashCode();
                if (this.Currencyisocode != null)
                    hashCode = hashCode * 59 + this.Currencyisocode.GetHashCode();
                if (this.Dates != null)
                    hashCode = hashCode * 59 + this.Dates.GetHashCode();
                hashCode = hashCode * 59 + this.Snapshot.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
