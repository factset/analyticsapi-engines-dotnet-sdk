/*
 * Engines API
 *
 * Allow clients to fetch Engines Analytics through APIs.
 *
 * The version of the OpenAPI document: 3
 * Contact: analytics.api.support@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.AnalyticsAPI.Engines.Client;
using FactSet.AnalyticsAPI.Engines.Model;

namespace FactSet.AnalyticsAPI.Engines.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAXPOptimizerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel Axioma optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <returns></returns>
        void CancelOptimizationById(string id);

        /// <summary>
        /// Cancel Axioma optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <returns>ApiResponse of Object(null)</returns>
        ApiResponse<object> CancelOptimizationByIdWithHttpInfo(string id);
        /// <summary>
        /// Get Axioma optimization parameters by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <returns>AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters</returns>
        AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters GetOptimizationParameters(string id);

        /// <summary>
        /// Get Axioma optimization parameters by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <returns>ApiResponse of AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters</returns>
        ApiResponse<AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters> GetOptimizationParametersWithHttpInfo(string id);
        /// <summary>
        /// Get Axioma optimization result by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to get the result of a previously requested optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get Axioma optimization status by id endpoint</param>
        /// <returns>ObjectObjectDataAndMetaModel</returns>
        ObjectObjectDataAndMetaModel GetOptimizationResult(string id);

        /// <summary>
        /// Get Axioma optimization result by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to get the result of a previously requested optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get Axioma optimization status by id endpoint</param>
        /// <returns>ApiResponse of ObjectObjectDataAndMetaModel</returns>
        ApiResponse<ObjectObjectDataAndMetaModel> GetOptimizationResultWithHttpInfo(string id);
        /// <summary>
        /// Get Axioma optimization status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <returns>ObjectObjectDataAndMetaModel</returns>
        ObjectObjectDataAndMetaModel GetOptimizationStatusById(string id);

        /// <summary>
        /// Get Axioma optimization status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <returns>ApiResponse of ObjectObjectDataAndMetaModel</returns>
        ApiResponse<ObjectObjectDataAndMetaModel> GetOptimizationStatusByIdWithHttpInfo(string id);
        /// <summary>
        /// Create and Run Axioma optimization
        /// </summary>
        /// <remarks>
        /// This endpoint creates and runs Axioma optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters">Optimization Parameters (optional)</param>
        /// <returns>ObjectObjectDataAndMetaModel</returns>
        ObjectObjectDataAndMetaModel PostAndOptimize(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters = default(AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters));

        /// <summary>
        /// Create and Run Axioma optimization
        /// </summary>
        /// <remarks>
        /// This endpoint creates and runs Axioma optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters">Optimization Parameters (optional)</param>
        /// <returns>ApiResponse of ObjectObjectDataAndMetaModel</returns>
        ApiResponse<ObjectObjectDataAndMetaModel> PostAndOptimizeWithHttpInfo(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters = default(AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters));
        /// <summary>
        /// Create or Update Axioma optimization and run it.
        /// </summary>
        /// <remarks>
        /// This endpoint updates and run the Axioma optimization specified in the PUT body parameters. It also allows the creation of new Axioma optimization with custom id.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters">Optimization Parameters (optional)</param>
        /// <returns>ObjectObjectDataAndMetaModel</returns>
        ObjectObjectDataAndMetaModel PutAndOptimize(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters = default(AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters));

        /// <summary>
        /// Create or Update Axioma optimization and run it.
        /// </summary>
        /// <remarks>
        /// This endpoint updates and run the Axioma optimization specified in the PUT body parameters. It also allows the creation of new Axioma optimization with custom id.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters">Optimization Parameters (optional)</param>
        /// <returns>ApiResponse of ObjectObjectDataAndMetaModel</returns>
        ApiResponse<ObjectObjectDataAndMetaModel> PutAndOptimizeWithHttpInfo(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters = default(AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAXPOptimizerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel Axioma optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelOptimizationByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Axioma optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of Object(null)</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> CancelOptimizationByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Axioma optimization parameters by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters</returns>
        System.Threading.Tasks.Task<AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters> GetOptimizationParametersAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Axioma optimization parameters by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters</returns>
        System.Threading.Tasks.Task<ApiResponse<AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters>> GetOptimizationParametersWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Axioma optimization result by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to get the result of a previously requested optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get Axioma optimization status by id endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectObjectDataAndMetaModel</returns>
        System.Threading.Tasks.Task<ObjectObjectDataAndMetaModel> GetOptimizationResultAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Axioma optimization result by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to get the result of a previously requested optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get Axioma optimization status by id endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of ObjectObjectDataAndMetaModel</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectObjectDataAndMetaModel>> GetOptimizationResultWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Axioma optimization status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectObjectDataAndMetaModel</returns>
        System.Threading.Tasks.Task<ObjectObjectDataAndMetaModel> GetOptimizationStatusByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Axioma optimization status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of ObjectObjectDataAndMetaModel</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectObjectDataAndMetaModel>> GetOptimizationStatusByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create and Run Axioma optimization
        /// </summary>
        /// <remarks>
        /// This endpoint creates and runs Axioma optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectObjectDataAndMetaModel</returns>
        System.Threading.Tasks.Task<ObjectObjectDataAndMetaModel> PostAndOptimizeAsync(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters = default(AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create and Run Axioma optimization
        /// </summary>
        /// <remarks>
        /// This endpoint creates and runs Axioma optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of ObjectObjectDataAndMetaModel</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectObjectDataAndMetaModel>> PostAndOptimizeWithHttpInfoAsync(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters = default(AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create or Update Axioma optimization and run it.
        /// </summary>
        /// <remarks>
        /// This endpoint updates and run the Axioma optimization specified in the PUT body parameters. It also allows the creation of new Axioma optimization with custom id.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectObjectDataAndMetaModel</returns>
        System.Threading.Tasks.Task<ObjectObjectDataAndMetaModel> PutAndOptimizeAsync(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters = default(AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or Update Axioma optimization and run it.
        /// </summary>
        /// <remarks>
        /// This endpoint updates and run the Axioma optimization specified in the PUT body parameters. It also allows the creation of new Axioma optimization with custom id.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of ObjectObjectDataAndMetaModel</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectObjectDataAndMetaModel>> PutAndOptimizeWithHttpInfoAsync(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters = default(AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAXPOptimizerApi : IAXPOptimizerApiSync, IAXPOptimizerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AXPOptimizerApi : IAXPOptimizerApi
    {
        private FactSet.AnalyticsAPI.Engines.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AXPOptimizerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AXPOptimizerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AXPOptimizerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AXPOptimizerApi(String basePath)
        {
            this.Configuration = FactSet.AnalyticsAPI.Engines.Client.Configuration.MergeConfigurations(
                FactSet.AnalyticsAPI.Engines.Client.GlobalConfiguration.Instance,
                new FactSet.AnalyticsAPI.Engines.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.AnalyticsAPI.Engines.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.AnalyticsAPI.Engines.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.AnalyticsAPI.Engines.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AXPOptimizerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AXPOptimizerApi(FactSet.AnalyticsAPI.Engines.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.AnalyticsAPI.Engines.Client.Configuration.MergeConfigurations(
                FactSet.AnalyticsAPI.Engines.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.AnalyticsAPI.Engines.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.AnalyticsAPI.Engines.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.AnalyticsAPI.Engines.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AXPOptimizerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AXPOptimizerApi(FactSet.AnalyticsAPI.Engines.Client.ISynchronousClient client, FactSet.AnalyticsAPI.Engines.Client.IAsynchronousClient asyncClient, FactSet.AnalyticsAPI.Engines.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.AnalyticsAPI.Engines.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.AnalyticsAPI.Engines.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.AnalyticsAPI.Engines.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.AnalyticsAPI.Engines.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.AnalyticsAPI.Engines.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel Axioma optimization by id This is the endpoint to cancel a previously submitted optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <returns></returns>
        public void CancelOptimizationById(string id)
        {
            CancelOptimizationByIdWithHttpInfo(id);
        }

        /// <summary>
        /// Cancel Axioma optimization by id This is the endpoint to cancel a previously submitted optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <returns>ApiResponse of Object(null)</returns>
        public FactSet.AnalyticsAPI.Engines.Client.ApiResponse<object> CancelOptimizationByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling AXPOptimizerApi->CancelOptimizationById");

            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<object>("/analytics/engines/axp/v3/optimizations/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOptimizationById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Axioma optimization by id This is the endpoint to cancel a previously submitted optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelOptimizationByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelOptimizationByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel Axioma optimization by id This is the endpoint to cancel a previously submitted optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of Object(null)</returns>
        public async System.Threading.Tasks.Task<FactSet.AnalyticsAPI.Engines.Client.ApiResponse<object>> CancelOptimizationByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling AXPOptimizerApi->CancelOptimizationById");


            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<object>("/analytics/engines/axp/v3/optimizations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOptimizationById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Axioma optimization parameters by id This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <returns>AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters</returns>
        public AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters GetOptimizationParameters(string id)
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters> localVarResponse = GetOptimizationParametersWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Axioma optimization parameters by id This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <returns>ApiResponse of AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters</returns>
        public FactSet.AnalyticsAPI.Engines.Client.ApiResponse<AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters> GetOptimizationParametersWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling AXPOptimizerApi->GetOptimizationParameters");

            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 200, typeof(AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters>("/analytics/engines/axp/v3/optimizations/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationParameters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Axioma optimization parameters by id This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters</returns>
        public async System.Threading.Tasks.Task<AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters> GetOptimizationParametersAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters> localVarResponse = await GetOptimizationParametersWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Axioma optimization parameters by id This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters</returns>
        public async System.Threading.Tasks.Task<FactSet.AnalyticsAPI.Engines.Client.ApiResponse<AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters>> GetOptimizationParametersWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling AXPOptimizerApi->GetOptimizationParameters");


            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 200, typeof(AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters>("/analytics/engines/axp/v3/optimizations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationParameters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Axioma optimization result by id This is the endpoint to get the result of a previously requested optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get Axioma optimization status by id endpoint</param>
        /// <returns>ObjectObjectDataAndMetaModel</returns>
        public ObjectObjectDataAndMetaModel GetOptimizationResult(string id)
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectObjectDataAndMetaModel> localVarResponse = GetOptimizationResultWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Axioma optimization result by id This is the endpoint to get the result of a previously requested optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get Axioma optimization status by id endpoint</param>
        /// <returns>ApiResponse of ObjectObjectDataAndMetaModel</returns>
        public FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectObjectDataAndMetaModel> GetOptimizationResultWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling AXPOptimizerApi->GetOptimizationResult");

            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 200, typeof(ObjectObjectDataAndMetaModel) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ObjectObjectDataAndMetaModel>("/analytics/engines/axp/v3/optimizations/{id}/result", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationResult", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Axioma optimization result by id This is the endpoint to get the result of a previously requested optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get Axioma optimization status by id endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectObjectDataAndMetaModel</returns>
        public async System.Threading.Tasks.Task<ObjectObjectDataAndMetaModel> GetOptimizationResultAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectObjectDataAndMetaModel> localVarResponse = await GetOptimizationResultWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Axioma optimization result by id This is the endpoint to get the result of a previously requested optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get Axioma optimization status by id endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of ObjectObjectDataAndMetaModel</returns>
        public async System.Threading.Tasks.Task<FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectObjectDataAndMetaModel>> GetOptimizationResultWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling AXPOptimizerApi->GetOptimizationResult");


            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 200, typeof(ObjectObjectDataAndMetaModel) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectObjectDataAndMetaModel>("/analytics/engines/axp/v3/optimizations/{id}/result", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationResult", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Axioma optimization status by id This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <returns>ObjectObjectDataAndMetaModel</returns>
        public ObjectObjectDataAndMetaModel GetOptimizationStatusById(string id)
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectObjectDataAndMetaModel> localVarResponse = GetOptimizationStatusByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Axioma optimization status by id This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <returns>ApiResponse of ObjectObjectDataAndMetaModel</returns>
        public FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectObjectDataAndMetaModel> GetOptimizationStatusByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling AXPOptimizerApi->GetOptimizationStatusById");

            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 201, typeof(ObjectObjectDataAndMetaModel) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ObjectObjectDataAndMetaModel>("/analytics/engines/axp/v3/optimizations/{id}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationStatusById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Axioma optimization status by id This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectObjectDataAndMetaModel</returns>
        public async System.Threading.Tasks.Task<ObjectObjectDataAndMetaModel> GetOptimizationStatusByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectObjectDataAndMetaModel> localVarResponse = await GetOptimizationStatusByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Axioma optimization status by id This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of ObjectObjectDataAndMetaModel</returns>
        public async System.Threading.Tasks.Task<FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectObjectDataAndMetaModel>> GetOptimizationStatusByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling AXPOptimizerApi->GetOptimizationStatusById");


            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 201, typeof(ObjectObjectDataAndMetaModel) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectObjectDataAndMetaModel>("/analytics/engines/axp/v3/optimizations/{id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationStatusById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create and Run Axioma optimization This endpoint creates and runs Axioma optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters">Optimization Parameters (optional)</param>
        /// <returns>ObjectObjectDataAndMetaModel</returns>
        public ObjectObjectDataAndMetaModel PostAndOptimize(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters = default(AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectObjectDataAndMetaModel> localVarResponse = PostAndOptimizeWithHttpInfo(xFactSetApiLongRunningDeadline, cacheControl, axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create and Run Axioma optimization This endpoint creates and runs Axioma optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters">Optimization Parameters (optional)</param>
        /// <returns>ApiResponse of ObjectObjectDataAndMetaModel</returns>
        public FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectObjectDataAndMetaModel> PostAndOptimizeWithHttpInfo(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters = default(AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters))
        {
            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 202, typeof(PersistedCalculationInfoObjectDataAndMetaModel) },
                { 201, typeof(ObjectObjectDataAndMetaModel) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xFactSetApiLongRunningDeadline != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-FactSet-Api-Long-Running-Deadline", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(xFactSetApiLongRunningDeadline)); // header parameter
            }
            if (cacheControl != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Cache-Control", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(cacheControl)); // header parameter
            }
            localVarRequestOptions.Data = axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters;

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ObjectObjectDataAndMetaModel>("/analytics/engines/axp/v3/optimizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAndOptimize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create and Run Axioma optimization This endpoint creates and runs Axioma optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectObjectDataAndMetaModel</returns>
        public async System.Threading.Tasks.Task<ObjectObjectDataAndMetaModel> PostAndOptimizeAsync(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters = default(AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectObjectDataAndMetaModel> localVarResponse = await PostAndOptimizeWithHttpInfoAsync(xFactSetApiLongRunningDeadline, cacheControl, axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create and Run Axioma optimization This endpoint creates and runs Axioma optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of ObjectObjectDataAndMetaModel</returns>
        public async System.Threading.Tasks.Task<FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectObjectDataAndMetaModel>> PostAndOptimizeWithHttpInfoAsync(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters = default(AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 202, typeof(PersistedCalculationInfoObjectDataAndMetaModel) },
                { 201, typeof(ObjectObjectDataAndMetaModel) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xFactSetApiLongRunningDeadline != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-FactSet-Api-Long-Running-Deadline", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(xFactSetApiLongRunningDeadline)); // header parameter
            }
            if (cacheControl != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Cache-Control", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(cacheControl)); // header parameter
            }
            localVarRequestOptions.Data = axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters;

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ObjectObjectDataAndMetaModel>("/analytics/engines/axp/v3/optimizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAndOptimize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or Update Axioma optimization and run it. This endpoint updates and run the Axioma optimization specified in the PUT body parameters. It also allows the creation of new Axioma optimization with custom id.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters">Optimization Parameters (optional)</param>
        /// <returns>ObjectObjectDataAndMetaModel</returns>
        public ObjectObjectDataAndMetaModel PutAndOptimize(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters = default(AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectObjectDataAndMetaModel> localVarResponse = PutAndOptimizeWithHttpInfo(id, xFactSetApiLongRunningDeadline, cacheControl, axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or Update Axioma optimization and run it. This endpoint updates and run the Axioma optimization specified in the PUT body parameters. It also allows the creation of new Axioma optimization with custom id.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters">Optimization Parameters (optional)</param>
        /// <returns>ApiResponse of ObjectObjectDataAndMetaModel</returns>
        public FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectObjectDataAndMetaModel> PutAndOptimizeWithHttpInfo(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters = default(AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling AXPOptimizerApi->PutAndOptimize");

            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 202, typeof(PersistedCalculationInfoObjectDataAndMetaModel) },
                { 201, typeof(ObjectObjectDataAndMetaModel) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
                { 409, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (xFactSetApiLongRunningDeadline != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-FactSet-Api-Long-Running-Deadline", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(xFactSetApiLongRunningDeadline)); // header parameter
            }
            if (cacheControl != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Cache-Control", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(cacheControl)); // header parameter
            }
            localVarRequestOptions.Data = axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters;

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ObjectObjectDataAndMetaModel>("/analytics/engines/axp/v3/optimizations/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutAndOptimize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or Update Axioma optimization and run it. This endpoint updates and run the Axioma optimization specified in the PUT body parameters. It also allows the creation of new Axioma optimization with custom id.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectObjectDataAndMetaModel</returns>
        public async System.Threading.Tasks.Task<ObjectObjectDataAndMetaModel> PutAndOptimizeAsync(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters = default(AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectObjectDataAndMetaModel> localVarResponse = await PutAndOptimizeWithHttpInfoAsync(id, xFactSetApiLongRunningDeadline, cacheControl, axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or Update Axioma optimization and run it. This endpoint updates and run the Axioma optimization specified in the PUT body parameters. It also allows the creation of new Axioma optimization with custom id.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run Axioma optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of ObjectObjectDataAndMetaModel</returns>
        public async System.Threading.Tasks.Task<FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectObjectDataAndMetaModel>> PutAndOptimizeWithHttpInfoAsync(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters = default(AxiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling AXPOptimizerApi->PutAndOptimize");


            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 202, typeof(PersistedCalculationInfoObjectDataAndMetaModel) },
                { 201, typeof(ObjectObjectDataAndMetaModel) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
                { 409, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (xFactSetApiLongRunningDeadline != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-FactSet-Api-Long-Running-Deadline", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(xFactSetApiLongRunningDeadline)); // header parameter
            }
            if (cacheControl != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Cache-Control", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(cacheControl)); // header parameter
            }
            localVarRequestOptions.Data = axiomaEquityOptimizationParametersOptimizerCalculationMetaInteractiveCalculationParameters;

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ObjectObjectDataAndMetaModel>("/analytics/engines/axp/v3/optimizations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutAndOptimize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}