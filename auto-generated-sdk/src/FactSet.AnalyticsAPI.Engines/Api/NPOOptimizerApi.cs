/*
 * Engines API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: v3:[pa,spar,vault,pub,quant,fi,axp,afi,npo,bpm,fpo,others],v1:[fiab]
 * Contact: testapi@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.AnalyticsAPI.Engines.Client;
using FactSet.AnalyticsAPI.Engines.Model;

namespace FactSet.AnalyticsAPI.Engines.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INPOOptimizerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel NPO optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns></returns>
        void CancelOptimizationById(string id);

        /// <summary>
        /// Cancel NPO optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>ApiResponse of Object(null)</returns>
        ApiResponse<object> CancelOptimizationByIdWithHttpInfo(string id);
        /// <summary>
        /// Get NPO optimization parameters by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>NPOOptimizationParametersRoot</returns>
        NPOOptimizationParametersRoot GetOptimizationParameters(string id);

        /// <summary>
        /// Get NPO optimization parameters by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>ApiResponse of NPOOptimizationParametersRoot</returns>
        ApiResponse<NPOOptimizationParametersRoot> GetOptimizationParametersWithHttpInfo(string id);
        /// <summary>
        /// Get NPO optimization result by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to get the result of a previously requested optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get NPO optimization status by id endpoint</param>
        /// <returns>ObjectRoot</returns>
        ObjectRoot GetOptimizationResult(string id);

        /// <summary>
        /// Get NPO optimization result by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to get the result of a previously requested optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get NPO optimization status by id endpoint</param>
        /// <returns>ApiResponse of ObjectRoot</returns>
        ApiResponse<ObjectRoot> GetOptimizationResultWithHttpInfo(string id);
        /// <summary>
        /// Get NPO optimization status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>ObjectRoot for 201 status</returns>
        /// <returns>null for 202 status</returns>
        
        object GetOptimizationStatusById(string id);

        /// <summary>
        /// Get NPO optimization status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>ApiResponse of ObjectRoot for 201 status</returns>
        /// <returns>ApiResponse of null for 202 status</returns>
        
        ApiResponse<object> GetOptimizationStatusByIdWithHttpInfo(string id);
        /// <summary>
        /// Create and Run NPO optimization
        /// </summary>
        /// <remarks>
        /// This endpoint creates and runs NPO optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <returns>CalculationInfoRoot for 202 status</returns>
        /// <returns>ObjectRoot for 201 status</returns>
        
        object PostAndOptimize(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot));

        /// <summary>
        /// Create and Run NPO optimization
        /// </summary>
        /// <remarks>
        /// This endpoint creates and runs NPO optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <returns>ApiResponse of CalculationInfoRoot for 202 status</returns>
        /// <returns>ApiResponse of ObjectRoot for 201 status</returns>
        
        ApiResponse<object> PostAndOptimizeWithHttpInfo(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot));
        /// <summary>
        /// Create or Update NPO optimization and run it.
        /// </summary>
        /// <remarks>
        /// This endpoint updates and run the NPO optimization specified in the PUT body parameters. It also allows the creation of new NPO optimization with custom id.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <returns>CalculationInfoRoot for 202 status</returns>
        /// <returns>ObjectRoot for 201 status</returns>
        
        object PutAndOptimize(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot));

        /// <summary>
        /// Create or Update NPO optimization and run it.
        /// </summary>
        /// <remarks>
        /// This endpoint updates and run the NPO optimization specified in the PUT body parameters. It also allows the creation of new NPO optimization with custom id.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <returns>ApiResponse of CalculationInfoRoot for 202 status</returns>
        /// <returns>ApiResponse of ObjectRoot for 201 status</returns>
        
        ApiResponse<object> PutAndOptimizeWithHttpInfo(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INPOOptimizerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel NPO optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelOptimizationByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel NPO optimization by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to cancel a previously submitted optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of Object(null)</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> CancelOptimizationByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NPO optimization parameters by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NPOOptimizationParametersRoot</returns>
        System.Threading.Tasks.Task<NPOOptimizationParametersRoot> GetOptimizationParametersAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NPO optimization parameters by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of NPOOptimizationParametersRoot</returns>
        System.Threading.Tasks.Task<ApiResponse<NPOOptimizationParametersRoot>> GetOptimizationParametersWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NPO optimization result by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to get the result of a previously requested optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get NPO optimization status by id endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectRoot</returns>
        System.Threading.Tasks.Task<ObjectRoot> GetOptimizationResultAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NPO optimization result by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to get the result of a previously requested optimization.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get NPO optimization status by id endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of ObjectRoot</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectRoot>> GetOptimizationResultWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NPO optimization status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectRoot for 201 status</returns>
        /// <returns>Task of null for 202 status</returns>
        
        System.Threading.Tasks.Task<object> GetOptimizationStatusByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NPO optimization status by id
        /// </summary>
        /// <remarks>
        /// This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of ObjectRoot for 201 status</returns>
        /// <returns>Task of ApiResponse of null for 202 status</returns>
        
        System.Threading.Tasks.Task<ApiResponse<object>> GetOptimizationStatusByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create and Run NPO optimization
        /// </summary>
        /// <remarks>
        /// This endpoint creates and runs NPO optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalculationInfoRoot for 202 status</returns>
        /// <returns>Task of ObjectRoot for 201 status</returns>
        
        System.Threading.Tasks.Task<object> PostAndOptimizeAsync(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create and Run NPO optimization
        /// </summary>
        /// <remarks>
        /// This endpoint creates and runs NPO optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of CalculationInfoRoot for 202 status</returns>
        /// <returns>Task of ApiResponse of ObjectRoot for 201 status</returns>
        
        System.Threading.Tasks.Task<ApiResponse<object>> PostAndOptimizeWithHttpInfoAsync(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create or Update NPO optimization and run it.
        /// </summary>
        /// <remarks>
        /// This endpoint updates and run the NPO optimization specified in the PUT body parameters. It also allows the creation of new NPO optimization with custom id.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalculationInfoRoot for 202 status</returns>
        /// <returns>Task of ObjectRoot for 201 status</returns>
        
        System.Threading.Tasks.Task<object> PutAndOptimizeAsync(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or Update NPO optimization and run it.
        /// </summary>
        /// <remarks>
        /// This endpoint updates and run the NPO optimization specified in the PUT body parameters. It also allows the creation of new NPO optimization with custom id.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of CalculationInfoRoot for 202 status</returns>
        /// <returns>Task of ApiResponse of ObjectRoot for 201 status</returns>
        
        System.Threading.Tasks.Task<ApiResponse<object>> PutAndOptimizeWithHttpInfoAsync(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INPOOptimizerApi : INPOOptimizerApiSync, INPOOptimizerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NPOOptimizerApi : INPOOptimizerApi
    {
        private FactSet.AnalyticsAPI.Engines.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NPOOptimizerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NPOOptimizerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NPOOptimizerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NPOOptimizerApi(String basePath)
        {
            this.Configuration = FactSet.AnalyticsAPI.Engines.Client.Configuration.MergeConfigurations(
                FactSet.AnalyticsAPI.Engines.Client.GlobalConfiguration.Instance,
                new FactSet.AnalyticsAPI.Engines.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.AnalyticsAPI.Engines.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.AnalyticsAPI.Engines.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.AnalyticsAPI.Engines.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NPOOptimizerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NPOOptimizerApi(FactSet.AnalyticsAPI.Engines.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.AnalyticsAPI.Engines.Client.Configuration.MergeConfigurations(
                FactSet.AnalyticsAPI.Engines.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.AnalyticsAPI.Engines.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.AnalyticsAPI.Engines.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.AnalyticsAPI.Engines.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NPOOptimizerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NPOOptimizerApi(FactSet.AnalyticsAPI.Engines.Client.ISynchronousClient client, FactSet.AnalyticsAPI.Engines.Client.IAsynchronousClient asyncClient, FactSet.AnalyticsAPI.Engines.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.AnalyticsAPI.Engines.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.AnalyticsAPI.Engines.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.AnalyticsAPI.Engines.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.AnalyticsAPI.Engines.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.AnalyticsAPI.Engines.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel NPO optimization by id This is the endpoint to cancel a previously submitted optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns></returns>
        public void CancelOptimizationById(string id)
        {
            CancelOptimizationByIdWithHttpInfo(id);
        }

        /// <summary>
        /// Cancel NPO optimization by id This is the endpoint to cancel a previously submitted optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>ApiResponse of Object(null)</returns>
        public FactSet.AnalyticsAPI.Engines.Client.ApiResponse<object> CancelOptimizationByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->CancelOptimizationById");

            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<object>("/analytics/engines/npo/v3/optimizations/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOptimizationById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel NPO optimization by id This is the endpoint to cancel a previously submitted optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelOptimizationByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelOptimizationByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel NPO optimization by id This is the endpoint to cancel a previously submitted optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of Object(null)</returns>
        public async System.Threading.Tasks.Task<FactSet.AnalyticsAPI.Engines.Client.ApiResponse<object>> CancelOptimizationByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->CancelOptimizationById");


            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<object>("/analytics/engines/npo/v3/optimizations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelOptimizationById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NPO optimization parameters by id This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>NPOOptimizationParametersRoot</returns>
        public NPOOptimizationParametersRoot GetOptimizationParameters(string id)
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<NPOOptimizationParametersRoot> localVarResponse = GetOptimizationParametersWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NPO optimization parameters by id This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>ApiResponse of NPOOptimizationParametersRoot</returns>
        public FactSet.AnalyticsAPI.Engines.Client.ApiResponse<NPOOptimizationParametersRoot> GetOptimizationParametersWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->GetOptimizationParameters");

            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 200, typeof(NPOOptimizationParametersRoot) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NPOOptimizationParametersRoot>("/analytics/engines/npo/v3/optimizations/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationParameters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NPO optimization parameters by id This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NPOOptimizationParametersRoot</returns>
        public async System.Threading.Tasks.Task<NPOOptimizationParametersRoot> GetOptimizationParametersAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<NPOOptimizationParametersRoot> localVarResponse = await GetOptimizationParametersWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NPO optimization parameters by id This is the endpoint that returns the optimization parameters passed for an optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of NPOOptimizationParametersRoot</returns>
        public async System.Threading.Tasks.Task<FactSet.AnalyticsAPI.Engines.Client.ApiResponse<NPOOptimizationParametersRoot>> GetOptimizationParametersWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->GetOptimizationParameters");


            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 200, typeof(NPOOptimizationParametersRoot) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NPOOptimizationParametersRoot>("/analytics/engines/npo/v3/optimizations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationParameters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NPO optimization result by id This is the endpoint to get the result of a previously requested optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get NPO optimization status by id endpoint</param>
        /// <returns>ObjectRoot</returns>
        public ObjectRoot GetOptimizationResult(string id)
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectRoot> localVarResponse = GetOptimizationResultWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NPO optimization result by id This is the endpoint to get the result of a previously requested optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get NPO optimization status by id endpoint</param>
        /// <returns>ApiResponse of ObjectRoot</returns>
        public FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectRoot> GetOptimizationResultWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->GetOptimizationResult");

            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 200, typeof(ObjectRoot) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ObjectRoot>("/analytics/engines/npo/v3/optimizations/{id}/result", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationResult", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NPO optimization result by id This is the endpoint to get the result of a previously requested optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get NPO optimization status by id endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectRoot</returns>
        public async System.Threading.Tasks.Task<ObjectRoot> GetOptimizationResultAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectRoot> localVarResponse = await GetOptimizationResultWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NPO optimization result by id This is the endpoint to get the result of a previously requested optimization.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Get NPO optimization status by id endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of ObjectRoot</returns>
        public async System.Threading.Tasks.Task<FactSet.AnalyticsAPI.Engines.Client.ApiResponse<ObjectRoot>> GetOptimizationResultWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->GetOptimizationResult");


            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 200, typeof(ObjectRoot) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectRoot>("/analytics/engines/npo/v3/optimizations/{id}/result", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationResult", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NPO optimization status by id This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>ObjectRoot for 201 status</returns>
        /// <returns>null for 202 status</returns>
        
        public object GetOptimizationStatusById(string id)
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<object> localVarResponse = GetOptimizationStatusByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NPO optimization status by id This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <returns>ApiResponse of ObjectRoot for 201 status</returns>
        /// <returns>ApiResponse of null for 202 status</returns>
        
        public FactSet.AnalyticsAPI.Engines.Client.ApiResponse<object> GetOptimizationStatusByIdWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->GetOptimizationStatusById");

            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 201, typeof(ObjectRoot) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<object>("/analytics/engines/npo/v3/optimizations/{id}/status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationStatusById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NPO optimization status by id This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectRoot for 201 status</returns>
        /// <returns>Task of null for 202 status</returns>
        
        public async System.Threading.Tasks.Task<object> GetOptimizationStatusByIdAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<object> localVarResponse = await GetOptimizationStatusByIdWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NPO optimization status by id This is the endpoint to check on the progress of a previously requested optimization.  If the optimization has finished computing, the body of the response will contain result in JSON.  Otherwise, the optimization is still running and the X-FactSet-Api-PickUp-Progress header will contain a progress percentage.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of ObjectRoot for 201 status</returns>
        /// <returns>Task of ApiResponse of null for 202 status</returns>
        
        public async System.Threading.Tasks.Task<FactSet.AnalyticsAPI.Engines.Client.ApiResponse<object>> GetOptimizationStatusByIdWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->GetOptimizationStatusById");


            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 201, typeof(ObjectRoot) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<object>("/analytics/engines/npo/v3/optimizations/{id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptimizationStatusById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create and Run NPO optimization This endpoint creates and runs NPO optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <returns>CalculationInfoRoot for 202 status</returns>
        /// <returns>ObjectRoot for 201 status</returns>
        
        public object PostAndOptimize(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<object> localVarResponse = PostAndOptimizeWithHttpInfo(xFactSetApiLongRunningDeadline, cacheControl, nPOOptimizationParametersRoot);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create and Run NPO optimization This endpoint creates and runs NPO optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <returns>ApiResponse of CalculationInfoRoot for 202 status</returns>
        /// <returns>ApiResponse of ObjectRoot for 201 status</returns>
        
        public FactSet.AnalyticsAPI.Engines.Client.ApiResponse<object> PostAndOptimizeWithHttpInfo(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot))
        {
            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 202, typeof(CalculationInfoRoot) },
                { 201, typeof(ObjectRoot) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xFactSetApiLongRunningDeadline != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-FactSet-Api-Long-Running-Deadline", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(xFactSetApiLongRunningDeadline)); // header parameter
            }
            if (cacheControl != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Cache-Control", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(cacheControl)); // header parameter
            }
            localVarRequestOptions.Data = nPOOptimizationParametersRoot;

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<object>("/analytics/engines/npo/v3/optimizations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAndOptimize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create and Run NPO optimization This endpoint creates and runs NPO optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalculationInfoRoot for 202 status</returns>
        /// <returns>Task of ObjectRoot for 201 status</returns>
        
        public async System.Threading.Tasks.Task<object> PostAndOptimizeAsync(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<object> localVarResponse = await PostAndOptimizeWithHttpInfoAsync(xFactSetApiLongRunningDeadline, cacheControl, nPOOptimizationParametersRoot, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create and Run NPO optimization This endpoint creates and runs NPO optimization specified in the POST body parameters.                Remarks:                * Any settings in POST body will act as a one-time override over the settings saved in the strategy document.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of CalculationInfoRoot for 202 status</returns>
        /// <returns>Task of ApiResponse of ObjectRoot for 201 status</returns>
        
        public async System.Threading.Tasks.Task<FactSet.AnalyticsAPI.Engines.Client.ApiResponse<object>> PostAndOptimizeWithHttpInfoAsync(int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 202, typeof(CalculationInfoRoot) },
                { 201, typeof(ObjectRoot) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xFactSetApiLongRunningDeadline != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-FactSet-Api-Long-Running-Deadline", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(xFactSetApiLongRunningDeadline)); // header parameter
            }
            if (cacheControl != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Cache-Control", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(cacheControl)); // header parameter
            }
            localVarRequestOptions.Data = nPOOptimizationParametersRoot;

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<object>("/analytics/engines/npo/v3/optimizations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostAndOptimize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or Update NPO optimization and run it. This endpoint updates and run the NPO optimization specified in the PUT body parameters. It also allows the creation of new NPO optimization with custom id.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <returns>CalculationInfoRoot for 202 status</returns>
        /// <returns>ObjectRoot for 201 status</returns>
        
        public object PutAndOptimize(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<object> localVarResponse = PutAndOptimizeWithHttpInfo(id, xFactSetApiLongRunningDeadline, cacheControl, nPOOptimizationParametersRoot);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or Update NPO optimization and run it. This endpoint updates and run the NPO optimization specified in the PUT body parameters. It also allows the creation of new NPO optimization with custom id.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <returns>ApiResponse of CalculationInfoRoot for 202 status</returns>
        /// <returns>ApiResponse of ObjectRoot for 201 status</returns>
        
        public FactSet.AnalyticsAPI.Engines.Client.ApiResponse<object> PutAndOptimizeWithHttpInfo(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->PutAndOptimize");

            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 202, typeof(CalculationInfoRoot) },
                { 201, typeof(ObjectRoot) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
                { 409, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (xFactSetApiLongRunningDeadline != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-FactSet-Api-Long-Running-Deadline", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(xFactSetApiLongRunningDeadline)); // header parameter
            }
            if (cacheControl != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Cache-Control", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(cacheControl)); // header parameter
            }
            localVarRequestOptions.Data = nPOOptimizationParametersRoot;

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<object>("/analytics/engines/npo/v3/optimizations/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutAndOptimize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or Update NPO optimization and run it. This endpoint updates and run the NPO optimization specified in the PUT body parameters. It also allows the creation of new NPO optimization with custom id.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CalculationInfoRoot for 202 status</returns>
        /// <returns>Task of ObjectRoot for 201 status</returns>
        
        public async System.Threading.Tasks.Task<object> PutAndOptimizeAsync(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<object> localVarResponse = await PutAndOptimizeWithHttpInfoAsync(id, xFactSetApiLongRunningDeadline, cacheControl, nPOOptimizationParametersRoot, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or Update NPO optimization and run it. This endpoint updates and run the NPO optimization specified in the PUT body parameters. It also allows the creation of new NPO optimization with custom id.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">from url, provided from the location header in the Create and Run NPO optimization endpoint</param>
        /// <param name="xFactSetApiLongRunningDeadline">Long running deadline in seconds. (optional)</param>
        /// <param name="cacheControl">Standard HTTP header.  Accepts max-stale. (optional)</param>
        /// <param name="nPOOptimizationParametersRoot">Optimization Parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of CalculationInfoRoot for 202 status</returns>
        /// <returns>Task of ApiResponse of ObjectRoot for 201 status</returns>
        
        public async System.Threading.Tasks.Task<FactSet.AnalyticsAPI.Engines.Client.ApiResponse<object>> PutAndOptimizeWithHttpInfoAsync(string id, int? xFactSetApiLongRunningDeadline = default(int?), string cacheControl = default(string), NPOOptimizationParametersRoot nPOOptimizationParametersRoot = default(NPOOptimizationParametersRoot), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'id' when calling NPOOptimizerApi->PutAndOptimize");


            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 202, typeof(CalculationInfoRoot) },
                { 201, typeof(ObjectRoot) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
                { 409, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (xFactSetApiLongRunningDeadline != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-FactSet-Api-Long-Running-Deadline", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(xFactSetApiLongRunningDeadline)); // header parameter
            }
            if (cacheControl != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Cache-Control", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(cacheControl)); // header parameter
            }
            localVarRequestOptions.Data = nPOOptimizationParametersRoot;

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<object>("/analytics/engines/npo/v3/optimizations/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutAndOptimize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}