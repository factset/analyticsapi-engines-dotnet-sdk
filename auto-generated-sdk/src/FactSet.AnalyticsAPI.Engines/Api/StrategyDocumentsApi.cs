/*
 * Engines API
 *
 * Allow clients to fetch Engines Analytics through APIs.
 *
 * The version of the OpenAPI document: 3
 * Contact: analytics.api.support@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FactSet.AnalyticsAPI.Engines.Client;
using FactSet.AnalyticsAPI.Engines.Model;

namespace FactSet.AnalyticsAPI.Engines.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStrategyDocumentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Axioma Equity strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all Axioma Equity strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>DocumentDirectoriesObjectDataAndMetaModel</returns>
        DocumentDirectoriesObjectDataAndMetaModel GetAxiomaEquityStrategyDocuments(string path);

        /// <summary>
        /// Get Axioma Equity strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all Axioma Equity strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> GetAxiomaEquityStrategyDocumentsWithHttpInfo(string path);
        /// <summary>
        /// Get Axioma FI strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all Axioma FI strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>DocumentDirectoriesObjectDataAndMetaModel</returns>
        DocumentDirectoriesObjectDataAndMetaModel GetAxiomaFIStrategyDocuments(string path);

        /// <summary>
        /// Get Axioma FI strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all Axioma FI strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> GetAxiomaFIStrategyDocumentsWithHttpInfo(string path);
        /// <summary>
        /// Get Barra strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all Barra strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>DocumentDirectoriesObjectDataAndMetaModel</returns>
        DocumentDirectoriesObjectDataAndMetaModel GetBarraStrategyDocuments(string path);

        /// <summary>
        /// Get Barra strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all Barra strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> GetBarraStrategyDocumentsWithHttpInfo(string path);
        /// <summary>
        /// Get FactSet Portfolio Optimizer strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all FactSet Portfolio Optimizer strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>DocumentDirectoriesObjectDataAndMetaModel</returns>
        DocumentDirectoriesObjectDataAndMetaModel GetFPOStrategyDocuments(string path);

        /// <summary>
        /// Get FactSet Portfolio Optimizer strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all FactSet Portfolio Optimizer strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> GetFPOStrategyDocumentsWithHttpInfo(string path);
        /// <summary>
        /// Get Northfield strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all Northfield strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>DocumentDirectoriesObjectDataAndMetaModel</returns>
        DocumentDirectoriesObjectDataAndMetaModel GetNorthfieldStrategyDocuments(string path);

        /// <summary>
        /// Get Northfield strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all Northfield strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> GetNorthfieldStrategyDocumentsWithHttpInfo(string path);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStrategyDocumentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Axioma Equity strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all Axioma Equity strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentDirectoriesObjectDataAndMetaModel</returns>
        System.Threading.Tasks.Task<DocumentDirectoriesObjectDataAndMetaModel> GetAxiomaEquityStrategyDocumentsAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Axioma Equity strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all Axioma Equity strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentDirectoriesObjectDataAndMetaModel>> GetAxiomaEquityStrategyDocumentsWithHttpInfoAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Axioma FI strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all Axioma FI strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentDirectoriesObjectDataAndMetaModel</returns>
        System.Threading.Tasks.Task<DocumentDirectoriesObjectDataAndMetaModel> GetAxiomaFIStrategyDocumentsAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Axioma FI strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all Axioma FI strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentDirectoriesObjectDataAndMetaModel>> GetAxiomaFIStrategyDocumentsWithHttpInfoAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Barra strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all Barra strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentDirectoriesObjectDataAndMetaModel</returns>
        System.Threading.Tasks.Task<DocumentDirectoriesObjectDataAndMetaModel> GetBarraStrategyDocumentsAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Barra strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all Barra strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentDirectoriesObjectDataAndMetaModel>> GetBarraStrategyDocumentsWithHttpInfoAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get FactSet Portfolio Optimizer strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all FactSet Portfolio Optimizer strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentDirectoriesObjectDataAndMetaModel</returns>
        System.Threading.Tasks.Task<DocumentDirectoriesObjectDataAndMetaModel> GetFPOStrategyDocumentsAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get FactSet Portfolio Optimizer strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all FactSet Portfolio Optimizer strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentDirectoriesObjectDataAndMetaModel>> GetFPOStrategyDocumentsWithHttpInfoAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Northfield strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all Northfield strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentDirectoriesObjectDataAndMetaModel</returns>
        System.Threading.Tasks.Task<DocumentDirectoriesObjectDataAndMetaModel> GetNorthfieldStrategyDocumentsAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Northfield strategy documents and sub-directories in a directory
        /// </summary>
        /// <remarks>
        /// This endpoint looks up all Northfield strategy documents and sub-directories in a given directory.
        /// </remarks>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentDirectoriesObjectDataAndMetaModel>> GetNorthfieldStrategyDocumentsWithHttpInfoAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStrategyDocumentsApi : IStrategyDocumentsApiSync, IStrategyDocumentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StrategyDocumentsApi : IStrategyDocumentsApi
    {
        private FactSet.AnalyticsAPI.Engines.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StrategyDocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StrategyDocumentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StrategyDocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StrategyDocumentsApi(String basePath)
        {
            this.Configuration = FactSet.AnalyticsAPI.Engines.Client.Configuration.MergeConfigurations(
                FactSet.AnalyticsAPI.Engines.Client.GlobalConfiguration.Instance,
                new FactSet.AnalyticsAPI.Engines.Client.Configuration { BasePath = basePath }
            );
            this.Client = new FactSet.AnalyticsAPI.Engines.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.AnalyticsAPI.Engines.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FactSet.AnalyticsAPI.Engines.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StrategyDocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StrategyDocumentsApi(FactSet.AnalyticsAPI.Engines.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FactSet.AnalyticsAPI.Engines.Client.Configuration.MergeConfigurations(
                FactSet.AnalyticsAPI.Engines.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new FactSet.AnalyticsAPI.Engines.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new FactSet.AnalyticsAPI.Engines.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FactSet.AnalyticsAPI.Engines.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StrategyDocumentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StrategyDocumentsApi(FactSet.AnalyticsAPI.Engines.Client.ISynchronousClient client, FactSet.AnalyticsAPI.Engines.Client.IAsynchronousClient asyncClient, FactSet.AnalyticsAPI.Engines.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FactSet.AnalyticsAPI.Engines.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public FactSet.AnalyticsAPI.Engines.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public FactSet.AnalyticsAPI.Engines.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public FactSet.AnalyticsAPI.Engines.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public FactSet.AnalyticsAPI.Engines.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Axioma Equity strategy documents and sub-directories in a directory This endpoint looks up all Axioma Equity strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>DocumentDirectoriesObjectDataAndMetaModel</returns>
        public DocumentDirectoriesObjectDataAndMetaModel GetAxiomaEquityStrategyDocuments(string path)
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> localVarResponse = GetAxiomaEquityStrategyDocumentsWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Axioma Equity strategy documents and sub-directories in a directory This endpoint looks up all Axioma Equity strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        public FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> GetAxiomaEquityStrategyDocumentsWithHttpInfo(string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'path' when calling StrategyDocumentsApi->GetAxiomaEquityStrategyDocuments");

            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 200, typeof(DocumentDirectoriesObjectDataAndMetaModel) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DocumentDirectoriesObjectDataAndMetaModel>("/analytics/engines/axp/v3/strategies/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAxiomaEquityStrategyDocuments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Axioma Equity strategy documents and sub-directories in a directory This endpoint looks up all Axioma Equity strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentDirectoriesObjectDataAndMetaModel</returns>
        public async System.Threading.Tasks.Task<DocumentDirectoriesObjectDataAndMetaModel> GetAxiomaEquityStrategyDocumentsAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> localVarResponse = await GetAxiomaEquityStrategyDocumentsWithHttpInfoAsync(path, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Axioma Equity strategy documents and sub-directories in a directory This endpoint looks up all Axioma Equity strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        public async System.Threading.Tasks.Task<FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel>> GetAxiomaEquityStrategyDocumentsWithHttpInfoAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'path' when calling StrategyDocumentsApi->GetAxiomaEquityStrategyDocuments");


            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 200, typeof(DocumentDirectoriesObjectDataAndMetaModel) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DocumentDirectoriesObjectDataAndMetaModel>("/analytics/engines/axp/v3/strategies/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAxiomaEquityStrategyDocuments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Axioma FI strategy documents and sub-directories in a directory This endpoint looks up all Axioma FI strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>DocumentDirectoriesObjectDataAndMetaModel</returns>
        public DocumentDirectoriesObjectDataAndMetaModel GetAxiomaFIStrategyDocuments(string path)
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> localVarResponse = GetAxiomaFIStrategyDocumentsWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Axioma FI strategy documents and sub-directories in a directory This endpoint looks up all Axioma FI strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        public FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> GetAxiomaFIStrategyDocumentsWithHttpInfo(string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'path' when calling StrategyDocumentsApi->GetAxiomaFIStrategyDocuments");

            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 200, typeof(DocumentDirectoriesObjectDataAndMetaModel) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DocumentDirectoriesObjectDataAndMetaModel>("/analytics/engines/afi/v3/strategies/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAxiomaFIStrategyDocuments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Axioma FI strategy documents and sub-directories in a directory This endpoint looks up all Axioma FI strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentDirectoriesObjectDataAndMetaModel</returns>
        public async System.Threading.Tasks.Task<DocumentDirectoriesObjectDataAndMetaModel> GetAxiomaFIStrategyDocumentsAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> localVarResponse = await GetAxiomaFIStrategyDocumentsWithHttpInfoAsync(path, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Axioma FI strategy documents and sub-directories in a directory This endpoint looks up all Axioma FI strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        public async System.Threading.Tasks.Task<FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel>> GetAxiomaFIStrategyDocumentsWithHttpInfoAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'path' when calling StrategyDocumentsApi->GetAxiomaFIStrategyDocuments");


            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 200, typeof(DocumentDirectoriesObjectDataAndMetaModel) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DocumentDirectoriesObjectDataAndMetaModel>("/analytics/engines/afi/v3/strategies/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAxiomaFIStrategyDocuments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Barra strategy documents and sub-directories in a directory This endpoint looks up all Barra strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>DocumentDirectoriesObjectDataAndMetaModel</returns>
        public DocumentDirectoriesObjectDataAndMetaModel GetBarraStrategyDocuments(string path)
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> localVarResponse = GetBarraStrategyDocumentsWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Barra strategy documents and sub-directories in a directory This endpoint looks up all Barra strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        public FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> GetBarraStrategyDocumentsWithHttpInfo(string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'path' when calling StrategyDocumentsApi->GetBarraStrategyDocuments");

            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 200, typeof(DocumentDirectoriesObjectDataAndMetaModel) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DocumentDirectoriesObjectDataAndMetaModel>("/analytics/engines/bpm/v3/strategies/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBarraStrategyDocuments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Barra strategy documents and sub-directories in a directory This endpoint looks up all Barra strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentDirectoriesObjectDataAndMetaModel</returns>
        public async System.Threading.Tasks.Task<DocumentDirectoriesObjectDataAndMetaModel> GetBarraStrategyDocumentsAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> localVarResponse = await GetBarraStrategyDocumentsWithHttpInfoAsync(path, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Barra strategy documents and sub-directories in a directory This endpoint looks up all Barra strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        public async System.Threading.Tasks.Task<FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel>> GetBarraStrategyDocumentsWithHttpInfoAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'path' when calling StrategyDocumentsApi->GetBarraStrategyDocuments");


            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 200, typeof(DocumentDirectoriesObjectDataAndMetaModel) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DocumentDirectoriesObjectDataAndMetaModel>("/analytics/engines/bpm/v3/strategies/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBarraStrategyDocuments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get FactSet Portfolio Optimizer strategy documents and sub-directories in a directory This endpoint looks up all FactSet Portfolio Optimizer strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>DocumentDirectoriesObjectDataAndMetaModel</returns>
        public DocumentDirectoriesObjectDataAndMetaModel GetFPOStrategyDocuments(string path)
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> localVarResponse = GetFPOStrategyDocumentsWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get FactSet Portfolio Optimizer strategy documents and sub-directories in a directory This endpoint looks up all FactSet Portfolio Optimizer strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        public FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> GetFPOStrategyDocumentsWithHttpInfo(string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'path' when calling StrategyDocumentsApi->GetFPOStrategyDocuments");

            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 200, typeof(DocumentDirectoriesObjectDataAndMetaModel) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DocumentDirectoriesObjectDataAndMetaModel>("/analytics/engines/fpo/v3/strategies/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFPOStrategyDocuments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get FactSet Portfolio Optimizer strategy documents and sub-directories in a directory This endpoint looks up all FactSet Portfolio Optimizer strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentDirectoriesObjectDataAndMetaModel</returns>
        public async System.Threading.Tasks.Task<DocumentDirectoriesObjectDataAndMetaModel> GetFPOStrategyDocumentsAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> localVarResponse = await GetFPOStrategyDocumentsWithHttpInfoAsync(path, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get FactSet Portfolio Optimizer strategy documents and sub-directories in a directory This endpoint looks up all FactSet Portfolio Optimizer strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        public async System.Threading.Tasks.Task<FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel>> GetFPOStrategyDocumentsWithHttpInfoAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'path' when calling StrategyDocumentsApi->GetFPOStrategyDocuments");


            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 200, typeof(DocumentDirectoriesObjectDataAndMetaModel) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DocumentDirectoriesObjectDataAndMetaModel>("/analytics/engines/fpo/v3/strategies/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFPOStrategyDocuments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Northfield strategy documents and sub-directories in a directory This endpoint looks up all Northfield strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>DocumentDirectoriesObjectDataAndMetaModel</returns>
        public DocumentDirectoriesObjectDataAndMetaModel GetNorthfieldStrategyDocuments(string path)
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> localVarResponse = GetNorthfieldStrategyDocumentsWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Northfield strategy documents and sub-directories in a directory This endpoint looks up all Northfield strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <returns>ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        public FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> GetNorthfieldStrategyDocumentsWithHttpInfo(string path)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'path' when calling StrategyDocumentsApi->GetNorthfieldStrategyDocuments");

            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 200, typeof(DocumentDirectoriesObjectDataAndMetaModel) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DocumentDirectoriesObjectDataAndMetaModel>("/analytics/engines/npo/v3/strategies/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNorthfieldStrategyDocuments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Northfield strategy documents and sub-directories in a directory This endpoint looks up all Northfield strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DocumentDirectoriesObjectDataAndMetaModel</returns>
        public async System.Threading.Tasks.Task<DocumentDirectoriesObjectDataAndMetaModel> GetNorthfieldStrategyDocumentsAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel> localVarResponse = await GetNorthfieldStrategyDocumentsWithHttpInfoAsync(path, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Northfield strategy documents and sub-directories in a directory This endpoint looks up all Northfield strategy documents and sub-directories in a given directory.
        /// </summary>
        /// <exception cref="FactSet.AnalyticsAPI.Engines.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The directory to get the strategy documents and sub-directories in</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse of DocumentDirectoriesObjectDataAndMetaModel</returns>
        public async System.Threading.Tasks.Task<FactSet.AnalyticsAPI.Engines.Client.ApiResponse<DocumentDirectoriesObjectDataAndMetaModel>> GetNorthfieldStrategyDocumentsWithHttpInfoAsync(string path, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new FactSet.AnalyticsAPI.Engines.Client.ApiException(400, "Missing required parameter 'path' when calling StrategyDocumentsApi->GetNorthfieldStrategyDocuments");


            FactSet.AnalyticsAPI.Engines.Client.RequestOptions localVarRequestOptions = new FactSet.AnalyticsAPI.Engines.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            localVarRequestOptions.ResponseReturnTypes = new Dictionary<int, Type>
            {
                { 200, typeof(DocumentDirectoriesObjectDataAndMetaModel) },
                { 400, typeof(ClientErrorResponse) },
                { 404, typeof(ClientErrorResponse) },
            };

            var localVarContentType = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = FactSet.AnalyticsAPI.Engines.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("path", FactSet.AnalyticsAPI.Engines.Client.ClientUtils.ParameterToString(path)); // path parameter

            // authentication (Basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + FactSet.AnalyticsAPI.Engines.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (Bearer) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DocumentDirectoriesObjectDataAndMetaModel>("/analytics/engines/npo/v3/strategies/{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNorthfieldStrategyDocuments", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}