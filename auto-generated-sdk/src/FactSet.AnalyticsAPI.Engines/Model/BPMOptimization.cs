/*
 * Engines API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: v3:[pa,spar,vault,pub,quant,fi,axp,afi,npo,bpm,fpo,others],v1:[fiab]
 * Contact: testapi@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.AnalyticsAPI.Engines.Client.OpenAPIDateConverter;

namespace FactSet.AnalyticsAPI.Engines.Model
{
    /// <summary>
    /// BPMOptimization
    /// </summary>
    [DataContract(Name = "BPMOptimization")]
    public partial class BPMOptimization : IEquatable<BPMOptimization>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BPMOptimization" /> class.
        /// </summary>
        /// <param name="market">Optimization market.</param>
        /// <param name="investAllCash">Optimization invest all cash.</param>
        /// <param name="riskModelDate">Risk model date.</param>
        /// <param name="backtestDate">Backtest date.</param>
        /// <param name="cashflow">Cash flow.</param>
        public BPMOptimization(string market = default(string), bool investAllCash = default(bool), string riskModelDate = default(string), string backtestDate = default(string), string cashflow = default(string))
        {
            this.Market = market;
            this.InvestAllCash = investAllCash;
            this.RiskModelDate = riskModelDate;
            this.BacktestDate = backtestDate;
            this.Cashflow = cashflow;
        }

        /// <summary>
        /// Optimization market
        /// </summary>
        /// <value>Optimization market</value>
        [DataMember(Name = "market", EmitDefaultValue = false)]
        public string Market { get; set; }

        /// <summary>
        /// Optimization invest all cash
        /// </summary>
        /// <value>Optimization invest all cash</value>
        [DataMember(Name = "investAllCash", EmitDefaultValue = false)]
        public bool InvestAllCash { get; set; }

        /// <summary>
        /// Risk model date
        /// </summary>
        /// <value>Risk model date</value>
        [DataMember(Name = "riskModelDate", EmitDefaultValue = false)]
        public string RiskModelDate { get; set; }

        /// <summary>
        /// Backtest date
        /// </summary>
        /// <value>Backtest date</value>
        [DataMember(Name = "backtestDate", EmitDefaultValue = false)]
        public string BacktestDate { get; set; }

        /// <summary>
        /// Cash flow
        /// </summary>
        /// <value>Cash flow</value>
        [DataMember(Name = "cashflow", EmitDefaultValue = false)]
        public string Cashflow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BPMOptimization {\n");
            sb.Append("  Market: ").Append(Market).Append("\n");
            sb.Append("  InvestAllCash: ").Append(InvestAllCash).Append("\n");
            sb.Append("  RiskModelDate: ").Append(RiskModelDate).Append("\n");
            sb.Append("  BacktestDate: ").Append(BacktestDate).Append("\n");
            sb.Append("  Cashflow: ").Append(Cashflow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BPMOptimization);
        }

        /// <summary>
        /// Returns true if BPMOptimization instances are equal
        /// </summary>
        /// <param name="input">Instance of BPMOptimization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BPMOptimization input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Market == input.Market ||
                    (this.Market != null &&
                    this.Market.Equals(input.Market))
                ) && 
                (
                    this.InvestAllCash == input.InvestAllCash ||
                    this.InvestAllCash.Equals(input.InvestAllCash)
                ) && 
                (
                    this.RiskModelDate == input.RiskModelDate ||
                    (this.RiskModelDate != null &&
                    this.RiskModelDate.Equals(input.RiskModelDate))
                ) && 
                (
                    this.BacktestDate == input.BacktestDate ||
                    (this.BacktestDate != null &&
                    this.BacktestDate.Equals(input.BacktestDate))
                ) && 
                (
                    this.Cashflow == input.Cashflow ||
                    (this.Cashflow != null &&
                    this.Cashflow.Equals(input.Cashflow))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Market != null)
                    hashCode = hashCode * 59 + this.Market.GetHashCode();
                hashCode = hashCode * 59 + this.InvestAllCash.GetHashCode();
                if (this.RiskModelDate != null)
                    hashCode = hashCode * 59 + this.RiskModelDate.GetHashCode();
                if (this.BacktestDate != null)
                    hashCode = hashCode * 59 + this.BacktestDate.GetHashCode();
                if (this.Cashflow != null)
                    hashCode = hashCode * 59 + this.Cashflow.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
