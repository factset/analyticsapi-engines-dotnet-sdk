/* 
 * Engines API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: v3:[pa,spar,vault,pub,fi,axp,afi,npo,bpm,fpo,others],v1:[fiab]
 * Contact: analytics.api.support@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.AnalyticsAPI.Engines.Client.OpenAPIDateConverter;

namespace FactSet.AnalyticsAPI.Engines.Model
{
    /// <summary>
    /// CalculationMeta
    /// </summary>
    [DataContract]
    public partial class CalculationMeta :  IEquatable<CalculationMeta>, IValidatableObject
    {
        /// <summary>
        /// Defines Contentorganization
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContentorganizationEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum Row for value: Row
            /// </summary>
            [EnumMember(Value = "Row")]
            Row = 2,

            /// <summary>
            /// Enum Column for value: Column
            /// </summary>
            [EnumMember(Value = "Column")]
            Column = 3,

            /// <summary>
            /// Enum SimplifiedRow for value: SimplifiedRow
            /// </summary>
            [EnumMember(Value = "SimplifiedRow")]
            SimplifiedRow = 4

        }

        /// <summary>
        /// Gets or Sets Contentorganization
        /// </summary>
        [DataMember(Name="contentorganization", EmitDefaultValue=false)]
        public ContentorganizationEnum? Contentorganization { get; set; }
        /// <summary>
        /// Defines Contenttype
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContenttypeEnum
        {
            /// <summary>
            /// Enum Json for value: Json
            /// </summary>
            [EnumMember(Value = "Json")]
            Json = 1,

            /// <summary>
            /// Enum Binary for value: Binary
            /// </summary>
            [EnumMember(Value = "Binary")]
            Binary = 2

        }

        /// <summary>
        /// Gets or Sets Contenttype
        /// </summary>
        [DataMember(Name="contenttype", EmitDefaultValue=false)]
        public ContenttypeEnum? Contenttype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CalculationMeta" /> class.
        /// </summary>
        /// <param name="contentorganization">contentorganization (default to ContentorganizationEnum.SimplifiedRow).</param>
        /// <param name="contenttype">contenttype (default to ContenttypeEnum.Json).</param>
        public CalculationMeta(ContentorganizationEnum? contentorganization = ContentorganizationEnum.SimplifiedRow, ContenttypeEnum? contenttype = ContenttypeEnum.Json)
        {
            this.Contentorganization = contentorganization;
            this.Contenttype = contenttype;
        }
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CalculationMeta {\n");
            sb.Append("  Contentorganization: ").Append(Contentorganization).Append("\n");
            sb.Append("  Contenttype: ").Append(Contenttype).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CalculationMeta);
        }

        /// <summary>
        /// Returns true if CalculationMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of CalculationMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CalculationMeta input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Contentorganization == input.Contentorganization ||
                    this.Contentorganization.Equals(input.Contentorganization)
                ) && 
                (
                    this.Contenttype == input.Contenttype ||
                    this.Contenttype.Equals(input.Contenttype)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Contentorganization.GetHashCode();
                hashCode = hashCode * 59 + this.Contenttype.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
