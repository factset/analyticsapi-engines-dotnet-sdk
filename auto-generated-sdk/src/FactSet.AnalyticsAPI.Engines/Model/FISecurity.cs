/*
 * Engines API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: v2:[pa,spar,vault,pub],v1:[fiab,fi,axp,afi,npo,bpm,fpo]
 * Contact: analytics.api.support@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.AnalyticsAPI.Engines.Client.OpenAPIDateConverter;

namespace FactSet.AnalyticsAPI.Engines.Model
{
    /// <summary>
    /// FISecurity
    /// </summary>
    [DataContract(Name = "FISecurity")]
    public partial class FISecurity : IEquatable<FISecurity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FISecurity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FISecurity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FISecurity" /> class.
        /// </summary>
        /// <param name="calcFromMethod">calcFromMethod (required).</param>
        /// <param name="calcFromValue">calcFromValue (required).</param>
        /// <param name="face">face (required).</param>
        /// <param name="symbol">symbol (required).</param>
        /// <param name="settlementDate">settlementDate (required).</param>
        /// <param name="discountCurve">discountCurve (required).</param>
        public FISecurity(string calcFromMethod = default(string), double calcFromValue = default(double), double face = default(double), string symbol = default(string), string settlementDate = default(string), string discountCurve = default(string))
        {
            // to ensure "calcFromMethod" is required (not null)
            this.CalcFromMethod = calcFromMethod ?? throw new ArgumentNullException("calcFromMethod is a required property for FISecurity and cannot be null");
            this.CalcFromValue = calcFromValue;
            this.Face = face;
            // to ensure "symbol" is required (not null)
            this.Symbol = symbol ?? throw new ArgumentNullException("symbol is a required property for FISecurity and cannot be null");
            // to ensure "settlementDate" is required (not null)
            this.SettlementDate = settlementDate ?? throw new ArgumentNullException("settlementDate is a required property for FISecurity and cannot be null");
            // to ensure "discountCurve" is required (not null)
            this.DiscountCurve = discountCurve ?? throw new ArgumentNullException("discountCurve is a required property for FISecurity and cannot be null");
        }

        /// <summary>
        /// Gets or Sets CalcFromMethod
        /// </summary>
        [DataMember(Name = "calcFromMethod", IsRequired = true, EmitDefaultValue = false)]
        public string CalcFromMethod { get; set; }

        /// <summary>
        /// Gets or Sets CalcFromValue
        /// </summary>
        [DataMember(Name = "calcFromValue", IsRequired = true, EmitDefaultValue = false)]
        public double CalcFromValue { get; set; }

        /// <summary>
        /// Gets or Sets Face
        /// </summary>
        [DataMember(Name = "face", IsRequired = true, EmitDefaultValue = false)]
        public double Face { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets SettlementDate
        /// </summary>
        [DataMember(Name = "settlementDate", IsRequired = true, EmitDefaultValue = false)]
        public string SettlementDate { get; set; }

        /// <summary>
        /// Gets or Sets DiscountCurve
        /// </summary>
        [DataMember(Name = "discountCurve", IsRequired = true, EmitDefaultValue = false)]
        public string DiscountCurve { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FISecurity {\n");
            sb.Append("  CalcFromMethod: ").Append(CalcFromMethod).Append("\n");
            sb.Append("  CalcFromValue: ").Append(CalcFromValue).Append("\n");
            sb.Append("  Face: ").Append(Face).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  SettlementDate: ").Append(SettlementDate).Append("\n");
            sb.Append("  DiscountCurve: ").Append(DiscountCurve).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FISecurity);
        }

        /// <summary>
        /// Returns true if FISecurity instances are equal
        /// </summary>
        /// <param name="input">Instance of FISecurity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FISecurity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CalcFromMethod == input.CalcFromMethod ||
                    (this.CalcFromMethod != null &&
                    this.CalcFromMethod.Equals(input.CalcFromMethod))
                ) && 
                (
                    this.CalcFromValue == input.CalcFromValue ||
                    this.CalcFromValue.Equals(input.CalcFromValue)
                ) && 
                (
                    this.Face == input.Face ||
                    this.Face.Equals(input.Face)
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.SettlementDate == input.SettlementDate ||
                    (this.SettlementDate != null &&
                    this.SettlementDate.Equals(input.SettlementDate))
                ) && 
                (
                    this.DiscountCurve == input.DiscountCurve ||
                    (this.DiscountCurve != null &&
                    this.DiscountCurve.Equals(input.DiscountCurve))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CalcFromMethod != null)
                    hashCode = hashCode * 59 + this.CalcFromMethod.GetHashCode();
                hashCode = hashCode * 59 + this.CalcFromValue.GetHashCode();
                hashCode = hashCode * 59 + this.Face.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.SettlementDate != null)
                    hashCode = hashCode * 59 + this.SettlementDate.GetHashCode();
                if (this.DiscountCurve != null)
                    hashCode = hashCode * 59 + this.DiscountCurve.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
