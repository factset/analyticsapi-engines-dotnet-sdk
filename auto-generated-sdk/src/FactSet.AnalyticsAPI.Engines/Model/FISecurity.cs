/*
 * Engines API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: v3:[pa,spar,vault,pub,quant,fi,axp,afi,npo,bpm,fpo,others],v1:[fiab]
 * Contact: analytics.api.support@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.AnalyticsAPI.Engines.Client.OpenAPIDateConverter;

namespace FactSet.AnalyticsAPI.Engines.Model
{
    /// <summary>
    /// FISecurity
    /// </summary>
    [DataContract(Name = "FISecurity")]
    public partial class FISecurity : IEquatable<FISecurity>, IValidatableObject
    {
        /// <summary>
        /// Call Method
        /// </summary>
        /// <value>Call Method</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CallMethodEnum
        {
            /// <summary>
            /// Enum NoCall for value: No Call
            /// </summary>
            [EnumMember(Value = "No Call")]
            NoCall = 1,

            /// <summary>
            /// Enum IntrinsicValue for value: Intrinsic Value
            /// </summary>
            [EnumMember(Value = "Intrinsic Value")]
            IntrinsicValue = 2,

            /// <summary>
            /// Enum FirstCall for value: First Call
            /// </summary>
            [EnumMember(Value = "First Call")]
            FirstCall = 3,

            /// <summary>
            /// Enum FirstPar for value: First Par
            /// </summary>
            [EnumMember(Value = "First Par")]
            FirstPar = 4

        }

        /// <summary>
        /// Call Method
        /// </summary>
        /// <value>Call Method</value>
        [DataMember(Name = "callMethod", EmitDefaultValue = false)]
        public CallMethodEnum? CallMethod { get; set; }
        /// <summary>
        /// Face type
        /// </summary>
        /// <value>Face type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FaceTypeEnum
        {
            /// <summary>
            /// Enum Current for value: Current
            /// </summary>
            [EnumMember(Value = "Current")]
            Current = 1,

            /// <summary>
            /// Enum Original for value: Original
            /// </summary>
            [EnumMember(Value = "Original")]
            Original = 2

        }

        /// <summary>
        /// Face type
        /// </summary>
        /// <value>Face type</value>
        [DataMember(Name = "faceType", EmitDefaultValue = false)]
        public FaceTypeEnum? FaceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FISecurity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FISecurity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FISecurity" /> class.
        /// </summary>
        /// <param name="settlement">Settlement date.</param>
        /// <param name="callMethod">Call Method.</param>
        /// <param name="calcFromMethod">Calculation from method.</param>
        /// <param name="calcFromValue">Calculation from value (required).</param>
        /// <param name="face">Face (default to 1D).</param>
        /// <param name="faceType">Face type (default to FaceTypeEnum.Current).</param>
        /// <param name="symbol">Symbol (required).</param>
        /// <param name="discountCurve">Discount curve.</param>
        public FISecurity(string settlement = default(string), CallMethodEnum? callMethod = default(CallMethodEnum?), string calcFromMethod = default(string), double calcFromValue = default(double), double face = 1D, FaceTypeEnum? faceType = FaceTypeEnum.Current, string symbol = default(string), string discountCurve = default(string))
        {
            this.CalcFromValue = calcFromValue;
            // to ensure "symbol" is required (not null)
            this.Symbol = symbol ?? throw new ArgumentNullException("symbol is a required property for FISecurity and cannot be null");
            this.Settlement = settlement;
            this.CallMethod = callMethod;
            this.CalcFromMethod = calcFromMethod;
            this.Face = face;
            this.FaceType = faceType;
            this.DiscountCurve = discountCurve;
        }

        /// <summary>
        /// Settlement date
        /// </summary>
        /// <value>Settlement date</value>
        [DataMember(Name = "settlement", EmitDefaultValue = false)]
        public string Settlement { get; set; }

        /// <summary>
        /// Calculation from method
        /// </summary>
        /// <value>Calculation from method</value>
        [DataMember(Name = "calcFromMethod", EmitDefaultValue = false)]
        public string CalcFromMethod { get; set; }

        /// <summary>
        /// Calculation from value
        /// </summary>
        /// <value>Calculation from value</value>
        [DataMember(Name = "calcFromValue", IsRequired = true, EmitDefaultValue = false)]
        public double CalcFromValue { get; set; }

        /// <summary>
        /// Face
        /// </summary>
        /// <value>Face</value>
        [DataMember(Name = "face", EmitDefaultValue = false)]
        public double Face { get; set; }

        /// <summary>
        /// Symbol
        /// </summary>
        /// <value>Symbol</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Discount curve
        /// </summary>
        /// <value>Discount curve</value>
        [DataMember(Name = "discountCurve", EmitDefaultValue = false)]
        public string DiscountCurve { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FISecurity {\n");
            sb.Append("  Settlement: ").Append(Settlement).Append("\n");
            sb.Append("  CallMethod: ").Append(CallMethod).Append("\n");
            sb.Append("  CalcFromMethod: ").Append(CalcFromMethod).Append("\n");
            sb.Append("  CalcFromValue: ").Append(CalcFromValue).Append("\n");
            sb.Append("  Face: ").Append(Face).Append("\n");
            sb.Append("  FaceType: ").Append(FaceType).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  DiscountCurve: ").Append(DiscountCurve).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FISecurity);
        }

        /// <summary>
        /// Returns true if FISecurity instances are equal
        /// </summary>
        /// <param name="input">Instance of FISecurity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FISecurity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Settlement == input.Settlement ||
                    (this.Settlement != null &&
                    this.Settlement.Equals(input.Settlement))
                ) && 
                (
                    this.CallMethod == input.CallMethod ||
                    this.CallMethod.Equals(input.CallMethod)
                ) && 
                (
                    this.CalcFromMethod == input.CalcFromMethod ||
                    (this.CalcFromMethod != null &&
                    this.CalcFromMethod.Equals(input.CalcFromMethod))
                ) && 
                (
                    this.CalcFromValue == input.CalcFromValue ||
                    this.CalcFromValue.Equals(input.CalcFromValue)
                ) && 
                (
                    this.Face == input.Face ||
                    this.Face.Equals(input.Face)
                ) && 
                (
                    this.FaceType == input.FaceType ||
                    this.FaceType.Equals(input.FaceType)
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.DiscountCurve == input.DiscountCurve ||
                    (this.DiscountCurve != null &&
                    this.DiscountCurve.Equals(input.DiscountCurve))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Settlement != null)
                    hashCode = hashCode * 59 + this.Settlement.GetHashCode();
                hashCode = hashCode * 59 + this.CallMethod.GetHashCode();
                if (this.CalcFromMethod != null)
                    hashCode = hashCode * 59 + this.CalcFromMethod.GetHashCode();
                hashCode = hashCode * 59 + this.CalcFromValue.GetHashCode();
                hashCode = hashCode * 59 + this.Face.GetHashCode();
                hashCode = hashCode * 59 + this.FaceType.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.DiscountCurve != null)
                    hashCode = hashCode * 59 + this.DiscountCurve.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
