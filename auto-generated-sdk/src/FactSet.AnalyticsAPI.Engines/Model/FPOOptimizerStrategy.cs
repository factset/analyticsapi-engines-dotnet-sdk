/*
 * Engines API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: v3:[pa,spar,vault,pub,quant,fi,axp,afi,npo,bpm,fpo,others],v1:[fiab]
 * Contact: testapi@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.AnalyticsAPI.Engines.Client.OpenAPIDateConverter;

namespace FactSet.AnalyticsAPI.Engines.Model
{
    /// <summary>
    /// FPOOptimizerStrategy
    /// </summary>
    [DataContract(Name = "FPOOptimizerStrategy")]
    public partial class FPOOptimizerStrategy : IEquatable<FPOOptimizerStrategy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FPOOptimizerStrategy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FPOOptimizerStrategy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FPOOptimizerStrategy" /> class.
        /// </summary>
        /// <param name="overrides">overrides.</param>
        /// <param name="id">OptimizerStrategy document path (required).</param>
        public FPOOptimizerStrategy(FPOOptimizerStrategyOverrides overrides = default(FPOOptimizerStrategyOverrides), string id = default(string))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for FPOOptimizerStrategy and cannot be null");
            this.Overrides = overrides;
        }

        /// <summary>
        /// Gets or Sets Overrides
        /// </summary>
        [DataMember(Name = "overrides", EmitDefaultValue = false)]
        public FPOOptimizerStrategyOverrides Overrides { get; set; }

        /// <summary>
        /// OptimizerStrategy document path
        /// </summary>
        /// <value>OptimizerStrategy document path</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FPOOptimizerStrategy {\n");
            sb.Append("  Overrides: ").Append(Overrides).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FPOOptimizerStrategy);
        }

        /// <summary>
        /// Returns true if FPOOptimizerStrategy instances are equal
        /// </summary>
        /// <param name="input">Instance of FPOOptimizerStrategy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FPOOptimizerStrategy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Overrides == input.Overrides ||
                    (this.Overrides != null &&
                    this.Overrides.Equals(input.Overrides))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Overrides != null)
                    hashCode = hashCode * 59 + this.Overrides.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
