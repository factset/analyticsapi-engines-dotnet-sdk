/*
 * Engines API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: v3:[pa,spar,vault,pub,quant,fi,axp,afi,npo,bpm,fpo,others],v1:[fiab]
 * Contact: analytics.api.support@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.AnalyticsAPI.Engines.Client.OpenAPIDateConverter;

namespace FactSet.AnalyticsAPI.Engines.Model
{
    /// <summary>
    /// Frequency
    /// </summary>
    [DataContract(Name = "Frequency")]
    public partial class Frequency : IEquatable<Frequency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Frequency" /> class.
        /// </summary>
        /// <param name="name">Frequency name..</param>
        /// <param name="periodicMultipliers">periodicMultipliers.</param>
        /// <param name="nperiodicMultipliers">nperiodicMultipliers.</param>
        /// <param name="iperiodicMultipliers">iperiodicMultipliers.</param>
        /// <param name="inperiodicMultipliers">inperiodicMultipliers.</param>
        public Frequency(string name = default(string), List<double> periodicMultipliers = default(List<double>), List<double> nperiodicMultipliers = default(List<double>), List<int> iperiodicMultipliers = default(List<int>), List<int> inperiodicMultipliers = default(List<int>))
        {
            this.Name = name;
            this.PeriodicMultipliers = periodicMultipliers;
            this.NperiodicMultipliers = nperiodicMultipliers;
            this.IperiodicMultipliers = iperiodicMultipliers;
            this.InperiodicMultipliers = inperiodicMultipliers;
        }

        /// <summary>
        /// Frequency name.
        /// </summary>
        /// <value>Frequency name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PeriodicMultipliers
        /// </summary>
        [DataMember(Name = "periodicMultipliers", EmitDefaultValue = false)]
        public List<double> PeriodicMultipliers { get; set; }

        /// <summary>
        /// Gets or Sets NperiodicMultipliers
        /// </summary>
        [DataMember(Name = "nperiodicMultipliers", EmitDefaultValue = false)]
        public List<double> NperiodicMultipliers { get; set; }

        /// <summary>
        /// Gets or Sets IperiodicMultipliers
        /// </summary>
        [DataMember(Name = "iperiodicMultipliers", EmitDefaultValue = false)]
        public List<int> IperiodicMultipliers { get; set; }

        /// <summary>
        /// Gets or Sets InperiodicMultipliers
        /// </summary>
        [DataMember(Name = "inperiodicMultipliers", EmitDefaultValue = false)]
        public List<int> InperiodicMultipliers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Frequency {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PeriodicMultipliers: ").Append(PeriodicMultipliers).Append("\n");
            sb.Append("  NperiodicMultipliers: ").Append(NperiodicMultipliers).Append("\n");
            sb.Append("  IperiodicMultipliers: ").Append(IperiodicMultipliers).Append("\n");
            sb.Append("  InperiodicMultipliers: ").Append(InperiodicMultipliers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Frequency);
        }

        /// <summary>
        /// Returns true if Frequency instances are equal
        /// </summary>
        /// <param name="input">Instance of Frequency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Frequency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PeriodicMultipliers == input.PeriodicMultipliers ||
                    this.PeriodicMultipliers != null &&
                    input.PeriodicMultipliers != null &&
                    this.PeriodicMultipliers.SequenceEqual(input.PeriodicMultipliers)
                ) && 
                (
                    this.NperiodicMultipliers == input.NperiodicMultipliers ||
                    this.NperiodicMultipliers != null &&
                    input.NperiodicMultipliers != null &&
                    this.NperiodicMultipliers.SequenceEqual(input.NperiodicMultipliers)
                ) && 
                (
                    this.IperiodicMultipliers == input.IperiodicMultipliers ||
                    this.IperiodicMultipliers != null &&
                    input.IperiodicMultipliers != null &&
                    this.IperiodicMultipliers.SequenceEqual(input.IperiodicMultipliers)
                ) && 
                (
                    this.InperiodicMultipliers == input.InperiodicMultipliers ||
                    this.InperiodicMultipliers != null &&
                    input.InperiodicMultipliers != null &&
                    this.InperiodicMultipliers.SequenceEqual(input.InperiodicMultipliers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PeriodicMultipliers != null)
                    hashCode = hashCode * 59 + this.PeriodicMultipliers.GetHashCode();
                if (this.NperiodicMultipliers != null)
                    hashCode = hashCode * 59 + this.NperiodicMultipliers.GetHashCode();
                if (this.IperiodicMultipliers != null)
                    hashCode = hashCode * 59 + this.IperiodicMultipliers.GetHashCode();
                if (this.InperiodicMultipliers != null)
                    hashCode = hashCode * 59 + this.InperiodicMultipliers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
