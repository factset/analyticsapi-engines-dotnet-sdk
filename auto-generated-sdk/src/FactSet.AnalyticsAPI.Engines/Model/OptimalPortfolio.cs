/* 
 * Engines API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: v2:[pa,spar,vault,pub],v1:[fiab,fi,axp,afi,npo,bpm,fpo]
 * Contact: analytics.api.support@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.AnalyticsAPI.Engines.Client.OpenAPIDateConverter;

namespace FactSet.AnalyticsAPI.Engines.Model
{
    /// <summary>
    /// OptimalPortfolio
    /// </summary>
    [DataContract]
    public partial class OptimalPortfolio :  IEquatable<OptimalPortfolio>, IValidatableObject
    {
        /// <summary>
        /// Archive action if account exists
        /// </summary>
        /// <value>Archive action if account exists</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IfexistsEnum
        {
            /// <summary>
            /// Enum Overwrite for value: Overwrite
            /// </summary>
            [EnumMember(Value = "Overwrite")]
            Overwrite = 1,

            /// <summary>
            /// Enum Appenddate for value: Appenddate
            /// </summary>
            [EnumMember(Value = "Appenddate")]
            Appenddate = 2,

            /// <summary>
            /// Enum Fail for value: Fail
            /// </summary>
            [EnumMember(Value = "Fail")]
            Fail = 3

        }

        /// <summary>
        /// Archive action if account exists
        /// </summary>
        /// <value>Archive action if account exists</value>
        [DataMember(Name="ifexists", EmitDefaultValue=false)]
        public IfexistsEnum? Ifexists { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OptimalPortfolio" /> class.
        /// </summary>
        /// <param name="acctname">Account path.</param>
        /// <param name="excludezero">Exclude zero.</param>
        /// <param name="archivedate">Archive date.</param>
        /// <param name="ifexists">Archive action if account exists.</param>
        public OptimalPortfolio(string acctname = default(string), bool excludezero = default(bool), string archivedate = default(string), IfexistsEnum? ifexists = default(IfexistsEnum?))
        {
            this.Acctname = acctname;
            this.Excludezero = excludezero;
            this.Archivedate = archivedate;
            this.Ifexists = ifexists;
        }
        
        /// <summary>
        /// Account path
        /// </summary>
        /// <value>Account path</value>
        [DataMember(Name="acctname", EmitDefaultValue=false)]
        public string Acctname { get; set; }

        /// <summary>
        /// Exclude zero
        /// </summary>
        /// <value>Exclude zero</value>
        [DataMember(Name="excludezero", EmitDefaultValue=false)]
        public bool Excludezero { get; set; }

        /// <summary>
        /// Archive date
        /// </summary>
        /// <value>Archive date</value>
        [DataMember(Name="archivedate", EmitDefaultValue=false)]
        public string Archivedate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OptimalPortfolio {\n");
            sb.Append("  Acctname: ").Append(Acctname).Append("\n");
            sb.Append("  Excludezero: ").Append(Excludezero).Append("\n");
            sb.Append("  Archivedate: ").Append(Archivedate).Append("\n");
            sb.Append("  Ifexists: ").Append(Ifexists).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptimalPortfolio);
        }

        /// <summary>
        /// Returns true if OptimalPortfolio instances are equal
        /// </summary>
        /// <param name="input">Instance of OptimalPortfolio to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptimalPortfolio input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Acctname == input.Acctname ||
                    (this.Acctname != null &&
                    this.Acctname.Equals(input.Acctname))
                ) && 
                (
                    this.Excludezero == input.Excludezero ||
                    this.Excludezero.Equals(input.Excludezero)
                ) && 
                (
                    this.Archivedate == input.Archivedate ||
                    (this.Archivedate != null &&
                    this.Archivedate.Equals(input.Archivedate))
                ) && 
                (
                    this.Ifexists == input.Ifexists ||
                    this.Ifexists.Equals(input.Ifexists)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Acctname != null)
                    hashCode = hashCode * 59 + this.Acctname.GetHashCode();
                hashCode = hashCode * 59 + this.Excludezero.GetHashCode();
                if (this.Archivedate != null)
                    hashCode = hashCode * 59 + this.Archivedate.GetHashCode();
                hashCode = hashCode * 59 + this.Ifexists.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
