/*
 * Engines API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: v3:[pa,spar,vault,pub,quant,fi,axp,afi,npo,bpm,fpo,others],v1:[fiab]
 * Contact: analytics.api.support@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.AnalyticsAPI.Engines.Client.OpenAPIDateConverter;

namespace FactSet.AnalyticsAPI.Engines.Model
{
    /// <summary>
    /// PACalculationParameters
    /// </summary>
    [DataContract(Name = "PACalculationParameters")]
    public partial class PACalculationParameters : IEquatable<PACalculationParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PACalculationParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PACalculationParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PACalculationParameters" /> class.
        /// </summary>
        /// <param name="componentid">The PA Engine component identifier to analyze. (required).</param>
        /// <param name="accounts">List of accounts..</param>
        /// <param name="benchmarks">List of benchmarks..</param>
        /// <param name="dates">dates.</param>
        /// <param name="groups">List of groupings for the PA calculation. This will take precedence over the groupings saved in the PA document..</param>
        /// <param name="currencyisocode">Currency ISO code for calculation..</param>
        /// <param name="columns">List of columns for the PA calculation. This will take precedence over the columns saved in the PA document..</param>
        /// <param name="datasources">datasources.</param>
        /// <param name="componentdetail">Component detail type for the PA component. It can be GROUPS or TOTALS or SECURITIES..</param>
        /// <param name="periodicMultipliers">periodicMultipliers.</param>
        /// <param name="nperiodicMultipliers">nperiodicMultipliers.</param>
        /// <param name="dhistRcvAssumpRates">dhistRcvAssumpRates.</param>
        /// <param name="ihistRcvAssumpRates">ihistRcvAssumpRates.</param>
        /// <param name="iperiodicMultipliers">iperiodicMultipliers.</param>
        /// <param name="inperiodicMultipliers">inperiodicMultipliers.</param>
        public PACalculationParameters(string componentid = default(string), List<PAIdentifier> accounts = default(List<PAIdentifier>), List<PAIdentifier> benchmarks = default(List<PAIdentifier>), PADateParameters dates = default(PADateParameters), List<PACalculationGroup> groups = default(List<PACalculationGroup>), string currencyisocode = default(string), List<PACalculationColumn> columns = default(List<PACalculationColumn>), PACalculationDataSources datasources = default(PACalculationDataSources), string componentdetail = default(string), List<double> periodicMultipliers = default(List<double>), List<Object> nperiodicMultipliers = default(List<Object>), List<double?> dhistRcvAssumpRates = default(List<double?>), List<int?> ihistRcvAssumpRates = default(List<int?>), List<int> iperiodicMultipliers = default(List<int>), List<Object> inperiodicMultipliers = default(List<Object>))
        {
            // to ensure "componentid" is required (not null)
            this.Componentid = componentid ?? throw new ArgumentNullException("componentid is a required property for PACalculationParameters and cannot be null");
            this.Accounts = accounts;
            this.Benchmarks = benchmarks;
            this.Dates = dates;
            this.Groups = groups;
            this.Currencyisocode = currencyisocode;
            this.Columns = columns;
            this.Datasources = datasources;
            this.Componentdetail = componentdetail;
            this.PeriodicMultipliers = periodicMultipliers;
            this.NperiodicMultipliers = nperiodicMultipliers;
            this.DhistRcvAssumpRates = dhistRcvAssumpRates;
            this.IhistRcvAssumpRates = ihistRcvAssumpRates;
            this.IperiodicMultipliers = iperiodicMultipliers;
            this.InperiodicMultipliers = inperiodicMultipliers;
        }

        /// <summary>
        /// The PA Engine component identifier to analyze.
        /// </summary>
        /// <value>The PA Engine component identifier to analyze.</value>
        [DataMember(Name = "componentid", IsRequired = true, EmitDefaultValue = false)]
        public string Componentid { get; set; }

        /// <summary>
        /// List of accounts.
        /// </summary>
        /// <value>List of accounts.</value>
        [DataMember(Name = "accounts", EmitDefaultValue = false)]
        public List<PAIdentifier> Accounts { get; set; }

        /// <summary>
        /// List of benchmarks.
        /// </summary>
        /// <value>List of benchmarks.</value>
        [DataMember(Name = "benchmarks", EmitDefaultValue = false)]
        public List<PAIdentifier> Benchmarks { get; set; }

        /// <summary>
        /// Gets or Sets Dates
        /// </summary>
        [DataMember(Name = "dates", EmitDefaultValue = false)]
        public PADateParameters Dates { get; set; }

        /// <summary>
        /// List of groupings for the PA calculation. This will take precedence over the groupings saved in the PA document.
        /// </summary>
        /// <value>List of groupings for the PA calculation. This will take precedence over the groupings saved in the PA document.</value>
        [DataMember(Name = "groups", EmitDefaultValue = false)]
        public List<PACalculationGroup> Groups { get; set; }

        /// <summary>
        /// Currency ISO code for calculation.
        /// </summary>
        /// <value>Currency ISO code for calculation.</value>
        [DataMember(Name = "currencyisocode", EmitDefaultValue = false)]
        public string Currencyisocode { get; set; }

        /// <summary>
        /// List of columns for the PA calculation. This will take precedence over the columns saved in the PA document.
        /// </summary>
        /// <value>List of columns for the PA calculation. This will take precedence over the columns saved in the PA document.</value>
        [DataMember(Name = "columns", EmitDefaultValue = false)]
        public List<PACalculationColumn> Columns { get; set; }

        /// <summary>
        /// Gets or Sets Datasources
        /// </summary>
        [DataMember(Name = "datasources", EmitDefaultValue = false)]
        public PACalculationDataSources Datasources { get; set; }

        /// <summary>
        /// Component detail type for the PA component. It can be GROUPS or TOTALS or SECURITIES.
        /// </summary>
        /// <value>Component detail type for the PA component. It can be GROUPS or TOTALS or SECURITIES.</value>
        [DataMember(Name = "componentdetail", EmitDefaultValue = false)]
        public string Componentdetail { get; set; }

        /// <summary>
        /// Gets or Sets PeriodicMultipliers
        /// </summary>
        [DataMember(Name = "periodicMultipliers", EmitDefaultValue = false)]
        public List<double> PeriodicMultipliers { get; set; }

        /// <summary>
        /// Gets or Sets NperiodicMultipliers
        /// </summary>
        [DataMember(Name = "nperiodicMultipliers", EmitDefaultValue = false)]
        public List<Object> NperiodicMultipliers { get; set; }

        /// <summary>
        /// Gets or Sets DhistRcvAssumpRates
        /// </summary>
        [DataMember(Name = "dhistRcvAssumpRates", EmitDefaultValue = false)]
        public List<double?> DhistRcvAssumpRates { get; set; }

        /// <summary>
        /// Gets or Sets IhistRcvAssumpRates
        /// </summary>
        [DataMember(Name = "ihistRcvAssumpRates", EmitDefaultValue = false)]
        public List<int?> IhistRcvAssumpRates { get; set; }

        /// <summary>
        /// Gets or Sets IperiodicMultipliers
        /// </summary>
        [DataMember(Name = "iperiodicMultipliers", EmitDefaultValue = false)]
        public List<int> IperiodicMultipliers { get; set; }

        /// <summary>
        /// Gets or Sets InperiodicMultipliers
        /// </summary>
        [DataMember(Name = "inperiodicMultipliers", EmitDefaultValue = false)]
        public List<Object> InperiodicMultipliers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PACalculationParameters {\n");
            sb.Append("  Componentid: ").Append(Componentid).Append("\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("  Benchmarks: ").Append(Benchmarks).Append("\n");
            sb.Append("  Dates: ").Append(Dates).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Currencyisocode: ").Append(Currencyisocode).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  Datasources: ").Append(Datasources).Append("\n");
            sb.Append("  Componentdetail: ").Append(Componentdetail).Append("\n");
            sb.Append("  PeriodicMultipliers: ").Append(PeriodicMultipliers).Append("\n");
            sb.Append("  NperiodicMultipliers: ").Append(NperiodicMultipliers).Append("\n");
            sb.Append("  DhistRcvAssumpRates: ").Append(DhistRcvAssumpRates).Append("\n");
            sb.Append("  IhistRcvAssumpRates: ").Append(IhistRcvAssumpRates).Append("\n");
            sb.Append("  IperiodicMultipliers: ").Append(IperiodicMultipliers).Append("\n");
            sb.Append("  InperiodicMultipliers: ").Append(InperiodicMultipliers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PACalculationParameters);
        }

        /// <summary>
        /// Returns true if PACalculationParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of PACalculationParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PACalculationParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Componentid == input.Componentid ||
                    (this.Componentid != null &&
                    this.Componentid.Equals(input.Componentid))
                ) && 
                (
                    this.Accounts == input.Accounts ||
                    this.Accounts != null &&
                    input.Accounts != null &&
                    this.Accounts.SequenceEqual(input.Accounts)
                ) && 
                (
                    this.Benchmarks == input.Benchmarks ||
                    this.Benchmarks != null &&
                    input.Benchmarks != null &&
                    this.Benchmarks.SequenceEqual(input.Benchmarks)
                ) && 
                (
                    this.Dates == input.Dates ||
                    (this.Dates != null &&
                    this.Dates.Equals(input.Dates))
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    input.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.Currencyisocode == input.Currencyisocode ||
                    (this.Currencyisocode != null &&
                    this.Currencyisocode.Equals(input.Currencyisocode))
                ) && 
                (
                    this.Columns == input.Columns ||
                    this.Columns != null &&
                    input.Columns != null &&
                    this.Columns.SequenceEqual(input.Columns)
                ) && 
                (
                    this.Datasources == input.Datasources ||
                    (this.Datasources != null &&
                    this.Datasources.Equals(input.Datasources))
                ) && 
                (
                    this.Componentdetail == input.Componentdetail ||
                    (this.Componentdetail != null &&
                    this.Componentdetail.Equals(input.Componentdetail))
                ) && 
                (
                    this.PeriodicMultipliers == input.PeriodicMultipliers ||
                    this.PeriodicMultipliers != null &&
                    input.PeriodicMultipliers != null &&
                    this.PeriodicMultipliers.SequenceEqual(input.PeriodicMultipliers)
                ) && 
                (
                    this.NperiodicMultipliers == input.NperiodicMultipliers ||
                    this.NperiodicMultipliers != null &&
                    input.NperiodicMultipliers != null &&
                    this.NperiodicMultipliers.SequenceEqual(input.NperiodicMultipliers)
                ) && 
                (
                    this.DhistRcvAssumpRates == input.DhistRcvAssumpRates ||
                    this.DhistRcvAssumpRates != null &&
                    input.DhistRcvAssumpRates != null &&
                    this.DhistRcvAssumpRates.SequenceEqual(input.DhistRcvAssumpRates)
                ) && 
                (
                    this.IhistRcvAssumpRates == input.IhistRcvAssumpRates ||
                    this.IhistRcvAssumpRates != null &&
                    input.IhistRcvAssumpRates != null &&
                    this.IhistRcvAssumpRates.SequenceEqual(input.IhistRcvAssumpRates)
                ) && 
                (
                    this.IperiodicMultipliers == input.IperiodicMultipliers ||
                    this.IperiodicMultipliers != null &&
                    input.IperiodicMultipliers != null &&
                    this.IperiodicMultipliers.SequenceEqual(input.IperiodicMultipliers)
                ) && 
                (
                    this.InperiodicMultipliers == input.InperiodicMultipliers ||
                    this.InperiodicMultipliers != null &&
                    input.InperiodicMultipliers != null &&
                    this.InperiodicMultipliers.SequenceEqual(input.InperiodicMultipliers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Componentid != null)
                    hashCode = hashCode * 59 + this.Componentid.GetHashCode();
                if (this.Accounts != null)
                    hashCode = hashCode * 59 + this.Accounts.GetHashCode();
                if (this.Benchmarks != null)
                    hashCode = hashCode * 59 + this.Benchmarks.GetHashCode();
                if (this.Dates != null)
                    hashCode = hashCode * 59 + this.Dates.GetHashCode();
                if (this.Groups != null)
                    hashCode = hashCode * 59 + this.Groups.GetHashCode();
                if (this.Currencyisocode != null)
                    hashCode = hashCode * 59 + this.Currencyisocode.GetHashCode();
                if (this.Columns != null)
                    hashCode = hashCode * 59 + this.Columns.GetHashCode();
                if (this.Datasources != null)
                    hashCode = hashCode * 59 + this.Datasources.GetHashCode();
                if (this.Componentdetail != null)
                    hashCode = hashCode * 59 + this.Componentdetail.GetHashCode();
                if (this.PeriodicMultipliers != null)
                    hashCode = hashCode * 59 + this.PeriodicMultipliers.GetHashCode();
                if (this.NperiodicMultipliers != null)
                    hashCode = hashCode * 59 + this.NperiodicMultipliers.GetHashCode();
                if (this.DhistRcvAssumpRates != null)
                    hashCode = hashCode * 59 + this.DhistRcvAssumpRates.GetHashCode();
                if (this.IhistRcvAssumpRates != null)
                    hashCode = hashCode * 59 + this.IhistRcvAssumpRates.GetHashCode();
                if (this.IperiodicMultipliers != null)
                    hashCode = hashCode * 59 + this.IperiodicMultipliers.GetHashCode();
                if (this.InperiodicMultipliers != null)
                    hashCode = hashCode * 59 + this.InperiodicMultipliers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
