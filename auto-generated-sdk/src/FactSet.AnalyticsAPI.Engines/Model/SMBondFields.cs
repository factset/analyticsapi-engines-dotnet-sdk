/*
 * Engines API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: v3:[pa,vault,pub,quant,fi,axp,afi,npo,bpm,fpo,security-modeling,others],v1:[fiab]
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.AnalyticsAPI.Engines.Client.OpenAPIDateConverter;

namespace FactSet.AnalyticsAPI.Engines.Model
{
    /// <summary>
    /// SMBondFields
    /// </summary>
    [DataContract(Name = "SMBondFields")]
    public partial class SMBondFields : IEquatable<SMBondFields>, IValidatableObject
    {
        /// <summary>
        /// Defines SecurityType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SecurityTypeEnum
        {
            /// <summary>
            /// Enum Bond for value: Bond
            /// </summary>
            [EnumMember(Value = "Bond")]
            Bond = 1,

            /// <summary>
            /// Enum CCF for value: CCF
            /// </summary>
            [EnumMember(Value = "CCF")]
            CCF = 2

        }

        /// <summary>
        /// Gets or Sets SecurityType
        /// </summary>
        [DataMember(Name = "securityType", IsRequired = true, EmitDefaultValue = false)]
        public SecurityTypeEnum SecurityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SMBondFields" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SMBondFields() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SMBondFields" /> class.
        /// </summary>
        /// <param name="_144aFlag">_144aFlag.</param>
        /// <param name="aperiodicMultipliers">aperiodicMultipliers.</param>
        /// <param name="aperiodicResetDates">aperiodicResetDates.</param>
        /// <param name="aperiodicSpreads">aperiodicSpreads.</param>
        /// <param name="businessDayConv">businessDayConv.</param>
        /// <param name="callAnnouncedDate">callAnnouncedDate.</param>
        /// <param name="callDates">callDates.</param>
        /// <param name="callFreq">callFreq.</param>
        /// <param name="callNoticeDays">callNoticeDays.</param>
        /// <param name="callPrices">callPrices.</param>
        /// <param name="cashRate">cashRate.</param>
        /// <param name="cognity">cognity.</param>
        /// <param name="conversionIdentifier">conversionIdentifier.</param>
        /// <param name="conversionRatio">conversionRatio.</param>
        /// <param name="conversionType">conversionType.</param>
        /// <param name="convertibleFlag">convertibleFlag.</param>
        /// <param name="country">country.</param>
        /// <param name="coupon">coupon.</param>
        /// <param name="couponType">couponType.</param>
        /// <param name="creditSpreadAdjustmentSingle">creditSpreadAdjustmentSingle.</param>
        /// <param name="currency">currency.</param>
        /// <param name="dayCountBasis">dayCountBasis.</param>
        /// <param name="defaultedDate">defaultedDate.</param>
        /// <param name="federalTaxExemptFlag">federalTaxExemptFlag.</param>
        /// <param name="firstPayDate">firstPayDate.</param>
        /// <param name="firstResetDate">firstResetDate.</param>
        /// <param name="floatFormula">floatFormula.</param>
        /// <param name="fltDayCountBasis">fltDayCountBasis.</param>
        /// <param name="fltFirstPayDate">fltFirstPayDate.</param>
        /// <param name="fltPayFreq">fltPayFreq.</param>
        /// <param name="histCouponDates">histCouponDates.</param>
        /// <param name="histCoupons">histCoupons.</param>
        /// <param name="histRcvAssumpDates">histRcvAssumpDates.</param>
        /// <param name="histRcvAssumpMonths">histRcvAssumpMonths.</param>
        /// <param name="histRcvAssumpRates">histRcvAssumpRates.</param>
        /// <param name="histRcvAssumpTargetDates">histRcvAssumpTargetDates.</param>
        /// <param name="inflationType">inflationType.</param>
        /// <param name="issueDate">issueDate.</param>
        /// <param name="issueName">issueName.</param>
        /// <param name="issuerId">issuerId.</param>
        /// <param name="lastModifiedSource">lastModifiedSource.</param>
        /// <param name="lastModifiedSourceMeta">lastModifiedSourceMeta.</param>
        /// <param name="lastModifiedTime">lastModifiedTime.</param>
        /// <param name="lifeCap">lifeCap.</param>
        /// <param name="lifeFloor">lifeFloor.</param>
        /// <param name="lockoutDays">lockoutDays.</param>
        /// <param name="lookBackDays">lookBackDays.</param>
        /// <param name="makeWholeCallFlag">makeWholeCallFlag.</param>
        /// <param name="makeWholeExpireDate">makeWholeExpireDate.</param>
        /// <param name="makeWholeSpread">makeWholeSpread.</param>
        /// <param name="matrixDates">matrixDates.</param>
        /// <param name="matrixMultipliers">matrixMultipliers.</param>
        /// <param name="matrixPricedFlag">matrixPricedFlag.</param>
        /// <param name="matrixSpreads">matrixSpreads.</param>
        /// <param name="matrixUseScheduleFlag">matrixUseScheduleFlag.</param>
        /// <param name="maturityDate">maturityDate.</param>
        /// <param name="maturityPrice">maturityPrice.</param>
        /// <param name="monthsToRecovery">monthsToRecovery.</param>
        /// <param name="multiplier">multiplier.</param>
        /// <param name="notionalFlag">notionalFlag.</param>
        /// <param name="observationShift">observationShift.</param>
        /// <param name="origAmtIssued">origAmtIssued.</param>
        /// <param name="parentName">parentName.</param>
        /// <param name="parPrice">parPrice.</param>
        /// <param name="parserInfo">parserInfo.</param>
        /// <param name="paymentDelay">paymentDelay.</param>
        /// <param name="payFreq">payFreq.</param>
        /// <param name="periodCap">periodCap.</param>
        /// <param name="periodFloor">periodFloor.</param>
        /// <param name="pikExpDate">pikExpDate.</param>
        /// <param name="pikRate">pikRate.</param>
        /// <param name="preferredSecExDateLen">preferredSecExDateLen.</param>
        /// <param name="preferredSecExDateUnits">preferredSecExDateUnits.</param>
        /// <param name="preferredSecFlag">preferredSecFlag.</param>
        /// <param name="preferredSecType">preferredSecType.</param>
        /// <param name="principalType">principalType.</param>
        /// <param name="putDates">putDates.</param>
        /// <param name="putNoticeDays">putNoticeDays.</param>
        /// <param name="putFreq">putFreq.</param>
        /// <param name="putPrices">putPrices.</param>
        /// <param name="pvtPlacementFlag">pvtPlacementFlag.</param>
        /// <param name="ratingFitch">ratingFitch.</param>
        /// <param name="ratingFitchDates">ratingFitchDates.</param>
        /// <param name="ratingFitchValues">ratingFitchValues.</param>
        /// <param name="ratingMoodysDates">ratingMoodysDates.</param>
        /// <param name="ratingMoodysValues">ratingMoodysValues.</param>
        /// <param name="ratingSpDates">ratingSpDates.</param>
        /// <param name="ratingSpValues">ratingSpValues.</param>
        /// <param name="recoveryPercentage">recoveryPercentage.</param>
        /// <param name="redemptionDate">redemptionDate.</param>
        /// <param name="redemptionOpt">redemptionOpt.</param>
        /// <param name="redemptionPrice">redemptionPrice.</param>
        /// <param name="reinstatedDate">reinstatedDate.</param>
        /// <param name="resetDelay">resetDelay.</param>
        /// <param name="resetFreq">resetFreq.</param>
        /// <param name="refIndex">refIndex.</param>
        /// <param name="secondaryToVendorFlag">secondaryToVendorFlag.</param>
        /// <param name="sector">sector.</param>
        /// <param name="sectorBarclay1">sectorBarclay1.</param>
        /// <param name="sectorBarclay2">sectorBarclay2.</param>
        /// <param name="sectorBarclay3">sectorBarclay3.</param>
        /// <param name="sectorBarclay4">sectorBarclay4.</param>
        /// <param name="sectorDef">sectorDef.</param>
        /// <param name="sectorIndustry">sectorIndustry.</param>
        /// <param name="sectorMain">sectorMain.</param>
        /// <param name="sectorMerrill1">sectorMerrill1.</param>
        /// <param name="sectorMerrill2">sectorMerrill2.</param>
        /// <param name="sectorMerrill3">sectorMerrill3.</param>
        /// <param name="sectorMerrill4">sectorMerrill4.</param>
        /// <param name="sectorSubGroup">sectorSubGroup.</param>
        /// <param name="sinkAmts">sinkAmts.</param>
        /// <param name="sinkDates">sinkDates.</param>
        /// <param name="spread">spread.</param>
        /// <param name="state">state.</param>
        /// <param name="status">status.</param>
        /// <param name="statusDates">statusDates.</param>
        /// <param name="statusValues">statusValues.</param>
        /// <param name="stepCashRates">stepCashRates.</param>
        /// <param name="stepCouponDates">stepCouponDates.</param>
        /// <param name="stepCoupons">stepCoupons.</param>
        /// <param name="stepPikRates">stepPikRates.</param>
        /// <param name="vendorCoverageDate">vendorCoverageDate.</param>
        /// <param name="vRDNFlag">vRDNFlag.</param>
        /// <param name="securityType">securityType (required).</param>
        public SMBondFields(bool _144aFlag = default(bool), List<double> aperiodicMultipliers = default(List<double>), List<string> aperiodicResetDates = default(List<string>), List<double> aperiodicSpreads = default(List<double>), string businessDayConv = default(string), string callAnnouncedDate = default(string), List<string> callDates = default(List<string>), string callFreq = default(string), int callNoticeDays = default(int), List<double> callPrices = default(List<double>), double cashRate = default(double), string cognity = default(string), string conversionIdentifier = default(string), double conversionRatio = default(double), string conversionType = default(string), bool convertibleFlag = default(bool), string country = default(string), double coupon = default(double), string couponType = default(string), double creditSpreadAdjustmentSingle = default(double), string currency = default(string), string dayCountBasis = default(string), string defaultedDate = default(string), bool federalTaxExemptFlag = default(bool), string firstPayDate = default(string), string firstResetDate = default(string), string floatFormula = default(string), string fltDayCountBasis = default(string), string fltFirstPayDate = default(string), string fltPayFreq = default(string), List<string> histCouponDates = default(List<string>), List<double> histCoupons = default(List<double>), List<string> histRcvAssumpDates = default(List<string>), List<int> histRcvAssumpMonths = default(List<int>), List<double> histRcvAssumpRates = default(List<double>), List<string> histRcvAssumpTargetDates = default(List<string>), string inflationType = default(string), string issueDate = default(string), string issueName = default(string), string issuerId = default(string), string lastModifiedSource = default(string), string lastModifiedSourceMeta = default(string), string lastModifiedTime = default(string), double lifeCap = default(double), double lifeFloor = default(double), int lockoutDays = default(int), int lookBackDays = default(int), bool makeWholeCallFlag = default(bool), string makeWholeExpireDate = default(string), double makeWholeSpread = default(double), List<string> matrixDates = default(List<string>), List<double> matrixMultipliers = default(List<double>), bool matrixPricedFlag = default(bool), List<double> matrixSpreads = default(List<double>), bool matrixUseScheduleFlag = default(bool), string maturityDate = default(string), double maturityPrice = default(double), double monthsToRecovery = default(double), double multiplier = default(double), bool notionalFlag = default(bool), int observationShift = default(int), double origAmtIssued = default(double), string parentName = default(string), double parPrice = default(double), string parserInfo = default(string), int paymentDelay = default(int), string payFreq = default(string), double periodCap = default(double), double periodFloor = default(double), string pikExpDate = default(string), int pikRate = default(int), int preferredSecExDateLen = default(int), string preferredSecExDateUnits = default(string), bool preferredSecFlag = default(bool), string preferredSecType = default(string), string principalType = default(string), List<string> putDates = default(List<string>), int putNoticeDays = default(int), string putFreq = default(string), List<double> putPrices = default(List<double>), bool pvtPlacementFlag = default(bool), string ratingFitch = default(string), List<string> ratingFitchDates = default(List<string>), List<string> ratingFitchValues = default(List<string>), List<string> ratingMoodysDates = default(List<string>), List<string> ratingMoodysValues = default(List<string>), List<string> ratingSpDates = default(List<string>), List<string> ratingSpValues = default(List<string>), double recoveryPercentage = default(double), string redemptionDate = default(string), string redemptionOpt = default(string), double redemptionPrice = default(double), string reinstatedDate = default(string), int resetDelay = default(int), string resetFreq = default(string), string refIndex = default(string), bool secondaryToVendorFlag = default(bool), string sector = default(string), string sectorBarclay1 = default(string), string sectorBarclay2 = default(string), string sectorBarclay3 = default(string), string sectorBarclay4 = default(string), string sectorDef = default(string), string sectorIndustry = default(string), string sectorMain = default(string), string sectorMerrill1 = default(string), string sectorMerrill2 = default(string), string sectorMerrill3 = default(string), string sectorMerrill4 = default(string), string sectorSubGroup = default(string), List<double> sinkAmts = default(List<double>), List<string> sinkDates = default(List<string>), double spread = default(double), string state = default(string), string status = default(string), List<string> statusDates = default(List<string>), List<string> statusValues = default(List<string>), List<double> stepCashRates = default(List<double>), List<string> stepCouponDates = default(List<string>), List<double> stepCoupons = default(List<double>), List<double> stepPikRates = default(List<double>), string vendorCoverageDate = default(string), bool vRDNFlag = default(bool), SecurityTypeEnum securityType = default(SecurityTypeEnum))
        {
            this.SecurityType = securityType;
            this._144aFlag = _144aFlag;
            this.AperiodicMultipliers = aperiodicMultipliers;
            this.AperiodicResetDates = aperiodicResetDates;
            this.AperiodicSpreads = aperiodicSpreads;
            this.BusinessDayConv = businessDayConv;
            this.CallAnnouncedDate = callAnnouncedDate;
            this.CallDates = callDates;
            this.CallFreq = callFreq;
            this.CallNoticeDays = callNoticeDays;
            this.CallPrices = callPrices;
            this.CashRate = cashRate;
            this.Cognity = cognity;
            this.ConversionIdentifier = conversionIdentifier;
            this.ConversionRatio = conversionRatio;
            this.ConversionType = conversionType;
            this.ConvertibleFlag = convertibleFlag;
            this.Country = country;
            this.Coupon = coupon;
            this.CouponType = couponType;
            this.CreditSpreadAdjustmentSingle = creditSpreadAdjustmentSingle;
            this.Currency = currency;
            this.DayCountBasis = dayCountBasis;
            this.DefaultedDate = defaultedDate;
            this.FederalTaxExemptFlag = federalTaxExemptFlag;
            this.FirstPayDate = firstPayDate;
            this.FirstResetDate = firstResetDate;
            this.FloatFormula = floatFormula;
            this.FltDayCountBasis = fltDayCountBasis;
            this.FltFirstPayDate = fltFirstPayDate;
            this.FltPayFreq = fltPayFreq;
            this.HistCouponDates = histCouponDates;
            this.HistCoupons = histCoupons;
            this.HistRcvAssumpDates = histRcvAssumpDates;
            this.HistRcvAssumpMonths = histRcvAssumpMonths;
            this.HistRcvAssumpRates = histRcvAssumpRates;
            this.HistRcvAssumpTargetDates = histRcvAssumpTargetDates;
            this.InflationType = inflationType;
            this.IssueDate = issueDate;
            this.IssueName = issueName;
            this.IssuerId = issuerId;
            this.LastModifiedSource = lastModifiedSource;
            this.LastModifiedSourceMeta = lastModifiedSourceMeta;
            this.LastModifiedTime = lastModifiedTime;
            this.LifeCap = lifeCap;
            this.LifeFloor = lifeFloor;
            this.LockoutDays = lockoutDays;
            this.LookBackDays = lookBackDays;
            this.MakeWholeCallFlag = makeWholeCallFlag;
            this.MakeWholeExpireDate = makeWholeExpireDate;
            this.MakeWholeSpread = makeWholeSpread;
            this.MatrixDates = matrixDates;
            this.MatrixMultipliers = matrixMultipliers;
            this.MatrixPricedFlag = matrixPricedFlag;
            this.MatrixSpreads = matrixSpreads;
            this.MatrixUseScheduleFlag = matrixUseScheduleFlag;
            this.MaturityDate = maturityDate;
            this.MaturityPrice = maturityPrice;
            this.MonthsToRecovery = monthsToRecovery;
            this.Multiplier = multiplier;
            this.NotionalFlag = notionalFlag;
            this.ObservationShift = observationShift;
            this.OrigAmtIssued = origAmtIssued;
            this.ParentName = parentName;
            this.ParPrice = parPrice;
            this.ParserInfo = parserInfo;
            this.PaymentDelay = paymentDelay;
            this.PayFreq = payFreq;
            this.PeriodCap = periodCap;
            this.PeriodFloor = periodFloor;
            this.PikExpDate = pikExpDate;
            this.PikRate = pikRate;
            this.PreferredSecExDateLen = preferredSecExDateLen;
            this.PreferredSecExDateUnits = preferredSecExDateUnits;
            this.PreferredSecFlag = preferredSecFlag;
            this.PreferredSecType = preferredSecType;
            this.PrincipalType = principalType;
            this.PutDates = putDates;
            this.PutNoticeDays = putNoticeDays;
            this.PutFreq = putFreq;
            this.PutPrices = putPrices;
            this.PvtPlacementFlag = pvtPlacementFlag;
            this.RatingFitch = ratingFitch;
            this.RatingFitchDates = ratingFitchDates;
            this.RatingFitchValues = ratingFitchValues;
            this.RatingMoodysDates = ratingMoodysDates;
            this.RatingMoodysValues = ratingMoodysValues;
            this.RatingSpDates = ratingSpDates;
            this.RatingSpValues = ratingSpValues;
            this.RecoveryPercentage = recoveryPercentage;
            this.RedemptionDate = redemptionDate;
            this.RedemptionOpt = redemptionOpt;
            this.RedemptionPrice = redemptionPrice;
            this.ReinstatedDate = reinstatedDate;
            this.ResetDelay = resetDelay;
            this.ResetFreq = resetFreq;
            this.RefIndex = refIndex;
            this.SecondaryToVendorFlag = secondaryToVendorFlag;
            this.Sector = sector;
            this.SectorBarclay1 = sectorBarclay1;
            this.SectorBarclay2 = sectorBarclay2;
            this.SectorBarclay3 = sectorBarclay3;
            this.SectorBarclay4 = sectorBarclay4;
            this.SectorDef = sectorDef;
            this.SectorIndustry = sectorIndustry;
            this.SectorMain = sectorMain;
            this.SectorMerrill1 = sectorMerrill1;
            this.SectorMerrill2 = sectorMerrill2;
            this.SectorMerrill3 = sectorMerrill3;
            this.SectorMerrill4 = sectorMerrill4;
            this.SectorSubGroup = sectorSubGroup;
            this.SinkAmts = sinkAmts;
            this.SinkDates = sinkDates;
            this.Spread = spread;
            this.State = state;
            this.Status = status;
            this.StatusDates = statusDates;
            this.StatusValues = statusValues;
            this.StepCashRates = stepCashRates;
            this.StepCouponDates = stepCouponDates;
            this.StepCoupons = stepCoupons;
            this.StepPikRates = stepPikRates;
            this.VendorCoverageDate = vendorCoverageDate;
            this.VRDNFlag = vRDNFlag;
        }

        /// <summary>
        /// Gets or Sets _144aFlag
        /// </summary>
        [DataMember(Name = "144aFlag", EmitDefaultValue = false)]
        public bool _144aFlag { get; set; }

        /// <summary>
        /// Gets or Sets AperiodicMultipliers
        /// </summary>
        [DataMember(Name = "aperiodicMultipliers", EmitDefaultValue = false)]
        public List<double> AperiodicMultipliers { get; set; }

        /// <summary>
        /// Gets or Sets AperiodicResetDates
        /// </summary>
        [DataMember(Name = "aperiodicResetDates", EmitDefaultValue = false)]
        public List<string> AperiodicResetDates { get; set; }

        /// <summary>
        /// Gets or Sets AperiodicSpreads
        /// </summary>
        [DataMember(Name = "aperiodicSpreads", EmitDefaultValue = false)]
        public List<double> AperiodicSpreads { get; set; }

        /// <summary>
        /// Gets or Sets BusinessDayConv
        /// </summary>
        [DataMember(Name = "businessDayConv", EmitDefaultValue = false)]
        public string BusinessDayConv { get; set; }

        /// <summary>
        /// Gets or Sets CallAnnouncedDate
        /// </summary>
        [DataMember(Name = "callAnnouncedDate", EmitDefaultValue = false)]
        public string CallAnnouncedDate { get; set; }

        /// <summary>
        /// Gets or Sets CallDates
        /// </summary>
        [DataMember(Name = "callDates", EmitDefaultValue = false)]
        public List<string> CallDates { get; set; }

        /// <summary>
        /// Gets or Sets CallFreq
        /// </summary>
        [DataMember(Name = "callFreq", EmitDefaultValue = false)]
        public string CallFreq { get; set; }

        /// <summary>
        /// Gets or Sets CallNoticeDays
        /// </summary>
        [DataMember(Name = "callNoticeDays", EmitDefaultValue = false)]
        public int CallNoticeDays { get; set; }

        /// <summary>
        /// Gets or Sets CallPrices
        /// </summary>
        [DataMember(Name = "callPrices", EmitDefaultValue = false)]
        public List<double> CallPrices { get; set; }

        /// <summary>
        /// Gets or Sets CashRate
        /// </summary>
        [DataMember(Name = "cashRate", EmitDefaultValue = false)]
        public double CashRate { get; set; }

        /// <summary>
        /// Gets or Sets Cognity
        /// </summary>
        [DataMember(Name = "cognity", EmitDefaultValue = false)]
        public string Cognity { get; set; }

        /// <summary>
        /// Gets or Sets ConversionIdentifier
        /// </summary>
        [DataMember(Name = "conversionIdentifier", EmitDefaultValue = false)]
        public string ConversionIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets ConversionRatio
        /// </summary>
        [DataMember(Name = "conversionRatio", EmitDefaultValue = false)]
        public double ConversionRatio { get; set; }

        /// <summary>
        /// Gets or Sets ConversionType
        /// </summary>
        [DataMember(Name = "conversionType", EmitDefaultValue = false)]
        public string ConversionType { get; set; }

        /// <summary>
        /// Gets or Sets ConvertibleFlag
        /// </summary>
        [DataMember(Name = "convertibleFlag", EmitDefaultValue = false)]
        public bool ConvertibleFlag { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Coupon
        /// </summary>
        [DataMember(Name = "coupon", EmitDefaultValue = false)]
        public double Coupon { get; set; }

        /// <summary>
        /// Gets or Sets CouponType
        /// </summary>
        [DataMember(Name = "couponType", EmitDefaultValue = false)]
        public string CouponType { get; set; }

        /// <summary>
        /// Gets or Sets CreditSpreadAdjustmentSingle
        /// </summary>
        [DataMember(Name = "creditSpreadAdjustmentSingle", EmitDefaultValue = false)]
        public double CreditSpreadAdjustmentSingle { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets DayCountBasis
        /// </summary>
        [DataMember(Name = "dayCountBasis", EmitDefaultValue = false)]
        public string DayCountBasis { get; set; }

        /// <summary>
        /// Gets or Sets DefaultedDate
        /// </summary>
        [DataMember(Name = "defaultedDate", EmitDefaultValue = false)]
        public string DefaultedDate { get; set; }

        /// <summary>
        /// Gets or Sets FederalTaxExemptFlag
        /// </summary>
        [DataMember(Name = "federalTaxExemptFlag", EmitDefaultValue = false)]
        public bool FederalTaxExemptFlag { get; set; }

        /// <summary>
        /// Gets or Sets FirstPayDate
        /// </summary>
        [DataMember(Name = "firstPayDate", EmitDefaultValue = false)]
        public string FirstPayDate { get; set; }

        /// <summary>
        /// Gets or Sets FirstResetDate
        /// </summary>
        [DataMember(Name = "firstResetDate", EmitDefaultValue = false)]
        public string FirstResetDate { get; set; }

        /// <summary>
        /// Gets or Sets FloatFormula
        /// </summary>
        [DataMember(Name = "floatFormula", EmitDefaultValue = false)]
        public string FloatFormula { get; set; }

        /// <summary>
        /// Gets or Sets FltDayCountBasis
        /// </summary>
        [DataMember(Name = "fltDayCountBasis", EmitDefaultValue = false)]
        public string FltDayCountBasis { get; set; }

        /// <summary>
        /// Gets or Sets FltFirstPayDate
        /// </summary>
        [DataMember(Name = "fltFirstPayDate", EmitDefaultValue = false)]
        public string FltFirstPayDate { get; set; }

        /// <summary>
        /// Gets or Sets FltPayFreq
        /// </summary>
        [DataMember(Name = "fltPayFreq", EmitDefaultValue = false)]
        public string FltPayFreq { get; set; }

        /// <summary>
        /// Gets or Sets HistCouponDates
        /// </summary>
        [DataMember(Name = "histCouponDates", EmitDefaultValue = false)]
        public List<string> HistCouponDates { get; set; }

        /// <summary>
        /// Gets or Sets HistCoupons
        /// </summary>
        [DataMember(Name = "histCoupons", EmitDefaultValue = false)]
        public List<double> HistCoupons { get; set; }

        /// <summary>
        /// Gets or Sets HistRcvAssumpDates
        /// </summary>
        [DataMember(Name = "histRcvAssumpDates", EmitDefaultValue = false)]
        public List<string> HistRcvAssumpDates { get; set; }

        /// <summary>
        /// Gets or Sets HistRcvAssumpMonths
        /// </summary>
        [DataMember(Name = "histRcvAssumpMonths", EmitDefaultValue = false)]
        public List<int> HistRcvAssumpMonths { get; set; }

        /// <summary>
        /// Gets or Sets HistRcvAssumpRates
        /// </summary>
        [DataMember(Name = "histRcvAssumpRates", EmitDefaultValue = false)]
        public List<double> HistRcvAssumpRates { get; set; }

        /// <summary>
        /// Gets or Sets HistRcvAssumpTargetDates
        /// </summary>
        [DataMember(Name = "histRcvAssumpTargetDates", EmitDefaultValue = false)]
        public List<string> HistRcvAssumpTargetDates { get; set; }

        /// <summary>
        /// Gets or Sets InflationType
        /// </summary>
        [DataMember(Name = "inflationType", EmitDefaultValue = false)]
        public string InflationType { get; set; }

        /// <summary>
        /// Gets or Sets IssueDate
        /// </summary>
        [DataMember(Name = "issueDate", EmitDefaultValue = false)]
        public string IssueDate { get; set; }

        /// <summary>
        /// Gets or Sets IssueName
        /// </summary>
        [DataMember(Name = "issueName", EmitDefaultValue = false)]
        public string IssueName { get; set; }

        /// <summary>
        /// Gets or Sets IssuerId
        /// </summary>
        [DataMember(Name = "issuerId", EmitDefaultValue = false)]
        public string IssuerId { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedSource
        /// </summary>
        [DataMember(Name = "lastModifiedSource", EmitDefaultValue = false)]
        public string LastModifiedSource { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedSourceMeta
        /// </summary>
        [DataMember(Name = "lastModifiedSourceMeta", EmitDefaultValue = false)]
        public string LastModifiedSourceMeta { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedTime
        /// </summary>
        [DataMember(Name = "lastModifiedTime", EmitDefaultValue = false)]
        public string LastModifiedTime { get; set; }

        /// <summary>
        /// Gets or Sets LifeCap
        /// </summary>
        [DataMember(Name = "lifeCap", EmitDefaultValue = false)]
        public double LifeCap { get; set; }

        /// <summary>
        /// Gets or Sets LifeFloor
        /// </summary>
        [DataMember(Name = "lifeFloor", EmitDefaultValue = false)]
        public double LifeFloor { get; set; }

        /// <summary>
        /// Gets or Sets LockoutDays
        /// </summary>
        [DataMember(Name = "lockoutDays", EmitDefaultValue = false)]
        public int LockoutDays { get; set; }

        /// <summary>
        /// Gets or Sets LookBackDays
        /// </summary>
        [DataMember(Name = "lookBackDays", EmitDefaultValue = false)]
        public int LookBackDays { get; set; }

        /// <summary>
        /// Gets or Sets MakeWholeCallFlag
        /// </summary>
        [DataMember(Name = "makeWholeCallFlag", EmitDefaultValue = false)]
        public bool MakeWholeCallFlag { get; set; }

        /// <summary>
        /// Gets or Sets MakeWholeExpireDate
        /// </summary>
        [DataMember(Name = "makeWholeExpireDate", EmitDefaultValue = false)]
        public string MakeWholeExpireDate { get; set; }

        /// <summary>
        /// Gets or Sets MakeWholeSpread
        /// </summary>
        [DataMember(Name = "makeWholeSpread", EmitDefaultValue = false)]
        public double MakeWholeSpread { get; set; }

        /// <summary>
        /// Gets or Sets MatrixDates
        /// </summary>
        [DataMember(Name = "matrixDates", EmitDefaultValue = false)]
        public List<string> MatrixDates { get; set; }

        /// <summary>
        /// Gets or Sets MatrixMultipliers
        /// </summary>
        [DataMember(Name = "matrixMultipliers", EmitDefaultValue = false)]
        public List<double> MatrixMultipliers { get; set; }

        /// <summary>
        /// Gets or Sets MatrixPricedFlag
        /// </summary>
        [DataMember(Name = "matrixPricedFlag", EmitDefaultValue = false)]
        public bool MatrixPricedFlag { get; set; }

        /// <summary>
        /// Gets or Sets MatrixSpreads
        /// </summary>
        [DataMember(Name = "matrixSpreads", EmitDefaultValue = false)]
        public List<double> MatrixSpreads { get; set; }

        /// <summary>
        /// Gets or Sets MatrixUseScheduleFlag
        /// </summary>
        [DataMember(Name = "matrixUseScheduleFlag", EmitDefaultValue = false)]
        public bool MatrixUseScheduleFlag { get; set; }

        /// <summary>
        /// Gets or Sets MaturityDate
        /// </summary>
        [DataMember(Name = "maturityDate", EmitDefaultValue = false)]
        public string MaturityDate { get; set; }

        /// <summary>
        /// Gets or Sets MaturityPrice
        /// </summary>
        [DataMember(Name = "maturityPrice", EmitDefaultValue = false)]
        public double MaturityPrice { get; set; }

        /// <summary>
        /// Gets or Sets MonthsToRecovery
        /// </summary>
        [DataMember(Name = "monthsToRecovery", EmitDefaultValue = false)]
        public double MonthsToRecovery { get; set; }

        /// <summary>
        /// Gets or Sets Multiplier
        /// </summary>
        [DataMember(Name = "multiplier", EmitDefaultValue = false)]
        public double Multiplier { get; set; }

        /// <summary>
        /// Gets or Sets NotionalFlag
        /// </summary>
        [DataMember(Name = "notionalFlag", EmitDefaultValue = false)]
        public bool NotionalFlag { get; set; }

        /// <summary>
        /// Gets or Sets ObservationShift
        /// </summary>
        [DataMember(Name = "observationShift", EmitDefaultValue = false)]
        public int ObservationShift { get; set; }

        /// <summary>
        /// Gets or Sets OrigAmtIssued
        /// </summary>
        [DataMember(Name = "origAmtIssued", EmitDefaultValue = false)]
        public double OrigAmtIssued { get; set; }

        /// <summary>
        /// Gets or Sets ParentName
        /// </summary>
        [DataMember(Name = "parentName", EmitDefaultValue = false)]
        public string ParentName { get; set; }

        /// <summary>
        /// Gets or Sets ParPrice
        /// </summary>
        [DataMember(Name = "parPrice", EmitDefaultValue = false)]
        public double ParPrice { get; set; }

        /// <summary>
        /// Gets or Sets ParserInfo
        /// </summary>
        [DataMember(Name = "parserInfo", EmitDefaultValue = false)]
        public string ParserInfo { get; set; }

        /// <summary>
        /// Gets or Sets PaymentDelay
        /// </summary>
        [DataMember(Name = "paymentDelay", EmitDefaultValue = false)]
        public int PaymentDelay { get; set; }

        /// <summary>
        /// Gets or Sets PayFreq
        /// </summary>
        [DataMember(Name = "payFreq", EmitDefaultValue = false)]
        public string PayFreq { get; set; }

        /// <summary>
        /// Gets or Sets PeriodCap
        /// </summary>
        [DataMember(Name = "periodCap", EmitDefaultValue = false)]
        public double PeriodCap { get; set; }

        /// <summary>
        /// Gets or Sets PeriodFloor
        /// </summary>
        [DataMember(Name = "periodFloor", EmitDefaultValue = false)]
        public double PeriodFloor { get; set; }

        /// <summary>
        /// Gets or Sets PikExpDate
        /// </summary>
        [DataMember(Name = "pikExpDate", EmitDefaultValue = false)]
        public string PikExpDate { get; set; }

        /// <summary>
        /// Gets or Sets PikRate
        /// </summary>
        [DataMember(Name = "pikRate", EmitDefaultValue = false)]
        public int PikRate { get; set; }

        /// <summary>
        /// Gets or Sets PreferredSecExDateLen
        /// </summary>
        [DataMember(Name = "preferredSecExDateLen", EmitDefaultValue = false)]
        public int PreferredSecExDateLen { get; set; }

        /// <summary>
        /// Gets or Sets PreferredSecExDateUnits
        /// </summary>
        [DataMember(Name = "preferredSecExDateUnits", EmitDefaultValue = false)]
        public string PreferredSecExDateUnits { get; set; }

        /// <summary>
        /// Gets or Sets PreferredSecFlag
        /// </summary>
        [DataMember(Name = "preferredSecFlag", EmitDefaultValue = false)]
        public bool PreferredSecFlag { get; set; }

        /// <summary>
        /// Gets or Sets PreferredSecType
        /// </summary>
        [DataMember(Name = "preferredSecType", EmitDefaultValue = false)]
        public string PreferredSecType { get; set; }

        /// <summary>
        /// Gets or Sets PrincipalType
        /// </summary>
        [DataMember(Name = "principalType", EmitDefaultValue = false)]
        public string PrincipalType { get; set; }

        /// <summary>
        /// Gets or Sets PutDates
        /// </summary>
        [DataMember(Name = "putDates", EmitDefaultValue = false)]
        public List<string> PutDates { get; set; }

        /// <summary>
        /// Gets or Sets PutNoticeDays
        /// </summary>
        [DataMember(Name = "putNoticeDays", EmitDefaultValue = false)]
        public int PutNoticeDays { get; set; }

        /// <summary>
        /// Gets or Sets PutFreq
        /// </summary>
        [DataMember(Name = "putFreq", EmitDefaultValue = false)]
        public string PutFreq { get; set; }

        /// <summary>
        /// Gets or Sets PutPrices
        /// </summary>
        [DataMember(Name = "putPrices", EmitDefaultValue = false)]
        public List<double> PutPrices { get; set; }

        /// <summary>
        /// Gets or Sets PvtPlacementFlag
        /// </summary>
        [DataMember(Name = "pvtPlacementFlag", EmitDefaultValue = false)]
        public bool PvtPlacementFlag { get; set; }

        /// <summary>
        /// Gets or Sets RatingFitch
        /// </summary>
        [DataMember(Name = "ratingFitch", EmitDefaultValue = false)]
        public string RatingFitch { get; set; }

        /// <summary>
        /// Gets or Sets RatingFitchDates
        /// </summary>
        [DataMember(Name = "ratingFitchDates", EmitDefaultValue = false)]
        public List<string> RatingFitchDates { get; set; }

        /// <summary>
        /// Gets or Sets RatingFitchValues
        /// </summary>
        [DataMember(Name = "ratingFitchValues", EmitDefaultValue = false)]
        public List<string> RatingFitchValues { get; set; }

        /// <summary>
        /// Gets or Sets RatingMoodysDates
        /// </summary>
        [DataMember(Name = "ratingMoodysDates", EmitDefaultValue = false)]
        public List<string> RatingMoodysDates { get; set; }

        /// <summary>
        /// Gets or Sets RatingMoodysValues
        /// </summary>
        [DataMember(Name = "ratingMoodysValues", EmitDefaultValue = false)]
        public List<string> RatingMoodysValues { get; set; }

        /// <summary>
        /// Gets or Sets RatingSpDates
        /// </summary>
        [DataMember(Name = "ratingSpDates", EmitDefaultValue = false)]
        public List<string> RatingSpDates { get; set; }

        /// <summary>
        /// Gets or Sets RatingSpValues
        /// </summary>
        [DataMember(Name = "ratingSpValues", EmitDefaultValue = false)]
        public List<string> RatingSpValues { get; set; }

        /// <summary>
        /// Gets or Sets RecoveryPercentage
        /// </summary>
        [DataMember(Name = "recoveryPercentage", EmitDefaultValue = false)]
        public double RecoveryPercentage { get; set; }

        /// <summary>
        /// Gets or Sets RedemptionDate
        /// </summary>
        [DataMember(Name = "redemptionDate", EmitDefaultValue = false)]
        public string RedemptionDate { get; set; }

        /// <summary>
        /// Gets or Sets RedemptionOpt
        /// </summary>
        [DataMember(Name = "redemptionOpt", EmitDefaultValue = false)]
        public string RedemptionOpt { get; set; }

        /// <summary>
        /// Gets or Sets RedemptionPrice
        /// </summary>
        [DataMember(Name = "redemptionPrice", EmitDefaultValue = false)]
        public double RedemptionPrice { get; set; }

        /// <summary>
        /// Gets or Sets ReinstatedDate
        /// </summary>
        [DataMember(Name = "reinstatedDate", EmitDefaultValue = false)]
        public string ReinstatedDate { get; set; }

        /// <summary>
        /// Gets or Sets ResetDelay
        /// </summary>
        [DataMember(Name = "resetDelay", EmitDefaultValue = false)]
        public int ResetDelay { get; set; }

        /// <summary>
        /// Gets or Sets ResetFreq
        /// </summary>
        [DataMember(Name = "resetFreq", EmitDefaultValue = false)]
        public string ResetFreq { get; set; }

        /// <summary>
        /// Gets or Sets RefIndex
        /// </summary>
        [DataMember(Name = "refIndex", EmitDefaultValue = false)]
        public string RefIndex { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryToVendorFlag
        /// </summary>
        [DataMember(Name = "secondaryToVendorFlag", EmitDefaultValue = false)]
        public bool SecondaryToVendorFlag { get; set; }

        /// <summary>
        /// Gets or Sets Sector
        /// </summary>
        [DataMember(Name = "sector", EmitDefaultValue = false)]
        public string Sector { get; set; }

        /// <summary>
        /// Gets or Sets SectorBarclay1
        /// </summary>
        [DataMember(Name = "sectorBarclay1", EmitDefaultValue = false)]
        public string SectorBarclay1 { get; set; }

        /// <summary>
        /// Gets or Sets SectorBarclay2
        /// </summary>
        [DataMember(Name = "sectorBarclay2", EmitDefaultValue = false)]
        public string SectorBarclay2 { get; set; }

        /// <summary>
        /// Gets or Sets SectorBarclay3
        /// </summary>
        [DataMember(Name = "sectorBarclay3", EmitDefaultValue = false)]
        public string SectorBarclay3 { get; set; }

        /// <summary>
        /// Gets or Sets SectorBarclay4
        /// </summary>
        [DataMember(Name = "sectorBarclay4", EmitDefaultValue = false)]
        public string SectorBarclay4 { get; set; }

        /// <summary>
        /// Gets or Sets SectorDef
        /// </summary>
        [DataMember(Name = "sectorDef", EmitDefaultValue = false)]
        public string SectorDef { get; set; }

        /// <summary>
        /// Gets or Sets SectorIndustry
        /// </summary>
        [DataMember(Name = "sectorIndustry", EmitDefaultValue = false)]
        public string SectorIndustry { get; set; }

        /// <summary>
        /// Gets or Sets SectorMain
        /// </summary>
        [DataMember(Name = "sectorMain", EmitDefaultValue = false)]
        public string SectorMain { get; set; }

        /// <summary>
        /// Gets or Sets SectorMerrill1
        /// </summary>
        [DataMember(Name = "sectorMerrill1", EmitDefaultValue = false)]
        public string SectorMerrill1 { get; set; }

        /// <summary>
        /// Gets or Sets SectorMerrill2
        /// </summary>
        [DataMember(Name = "sectorMerrill2", EmitDefaultValue = false)]
        public string SectorMerrill2 { get; set; }

        /// <summary>
        /// Gets or Sets SectorMerrill3
        /// </summary>
        [DataMember(Name = "sectorMerrill3", EmitDefaultValue = false)]
        public string SectorMerrill3 { get; set; }

        /// <summary>
        /// Gets or Sets SectorMerrill4
        /// </summary>
        [DataMember(Name = "sectorMerrill4", EmitDefaultValue = false)]
        public string SectorMerrill4 { get; set; }

        /// <summary>
        /// Gets or Sets SectorSubGroup
        /// </summary>
        [DataMember(Name = "sectorSubGroup", EmitDefaultValue = false)]
        public string SectorSubGroup { get; set; }

        /// <summary>
        /// Gets or Sets SinkAmts
        /// </summary>
        [DataMember(Name = "sinkAmts", EmitDefaultValue = false)]
        public List<double> SinkAmts { get; set; }

        /// <summary>
        /// Gets or Sets SinkDates
        /// </summary>
        [DataMember(Name = "sinkDates", EmitDefaultValue = false)]
        public List<string> SinkDates { get; set; }

        /// <summary>
        /// Gets or Sets Spread
        /// </summary>
        [DataMember(Name = "spread", EmitDefaultValue = false)]
        public double Spread { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusDates
        /// </summary>
        [DataMember(Name = "statusDates", EmitDefaultValue = false)]
        public List<string> StatusDates { get; set; }

        /// <summary>
        /// Gets or Sets StatusValues
        /// </summary>
        [DataMember(Name = "statusValues", EmitDefaultValue = false)]
        public List<string> StatusValues { get; set; }

        /// <summary>
        /// Gets or Sets StepCashRates
        /// </summary>
        [DataMember(Name = "stepCashRates", EmitDefaultValue = false)]
        public List<double> StepCashRates { get; set; }

        /// <summary>
        /// Gets or Sets StepCouponDates
        /// </summary>
        [DataMember(Name = "stepCouponDates", EmitDefaultValue = false)]
        public List<string> StepCouponDates { get; set; }

        /// <summary>
        /// Gets or Sets StepCoupons
        /// </summary>
        [DataMember(Name = "stepCoupons", EmitDefaultValue = false)]
        public List<double> StepCoupons { get; set; }

        /// <summary>
        /// Gets or Sets StepPikRates
        /// </summary>
        [DataMember(Name = "stepPikRates", EmitDefaultValue = false)]
        public List<double> StepPikRates { get; set; }

        /// <summary>
        /// Gets or Sets VendorCoverageDate
        /// </summary>
        [DataMember(Name = "vendorCoverageDate", EmitDefaultValue = false)]
        public string VendorCoverageDate { get; set; }

        /// <summary>
        /// Gets or Sets VRDNFlag
        /// </summary>
        [DataMember(Name = "vRDNFlag", EmitDefaultValue = false)]
        public bool VRDNFlag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SMBondFields {\n");
            sb.Append("  _144aFlag: ").Append(_144aFlag).Append("\n");
            sb.Append("  AperiodicMultipliers: ").Append(AperiodicMultipliers).Append("\n");
            sb.Append("  AperiodicResetDates: ").Append(AperiodicResetDates).Append("\n");
            sb.Append("  AperiodicSpreads: ").Append(AperiodicSpreads).Append("\n");
            sb.Append("  BusinessDayConv: ").Append(BusinessDayConv).Append("\n");
            sb.Append("  CallAnnouncedDate: ").Append(CallAnnouncedDate).Append("\n");
            sb.Append("  CallDates: ").Append(CallDates).Append("\n");
            sb.Append("  CallFreq: ").Append(CallFreq).Append("\n");
            sb.Append("  CallNoticeDays: ").Append(CallNoticeDays).Append("\n");
            sb.Append("  CallPrices: ").Append(CallPrices).Append("\n");
            sb.Append("  CashRate: ").Append(CashRate).Append("\n");
            sb.Append("  Cognity: ").Append(Cognity).Append("\n");
            sb.Append("  ConversionIdentifier: ").Append(ConversionIdentifier).Append("\n");
            sb.Append("  ConversionRatio: ").Append(ConversionRatio).Append("\n");
            sb.Append("  ConversionType: ").Append(ConversionType).Append("\n");
            sb.Append("  ConvertibleFlag: ").Append(ConvertibleFlag).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Coupon: ").Append(Coupon).Append("\n");
            sb.Append("  CouponType: ").Append(CouponType).Append("\n");
            sb.Append("  CreditSpreadAdjustmentSingle: ").Append(CreditSpreadAdjustmentSingle).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  DayCountBasis: ").Append(DayCountBasis).Append("\n");
            sb.Append("  DefaultedDate: ").Append(DefaultedDate).Append("\n");
            sb.Append("  FederalTaxExemptFlag: ").Append(FederalTaxExemptFlag).Append("\n");
            sb.Append("  FirstPayDate: ").Append(FirstPayDate).Append("\n");
            sb.Append("  FirstResetDate: ").Append(FirstResetDate).Append("\n");
            sb.Append("  FloatFormula: ").Append(FloatFormula).Append("\n");
            sb.Append("  FltDayCountBasis: ").Append(FltDayCountBasis).Append("\n");
            sb.Append("  FltFirstPayDate: ").Append(FltFirstPayDate).Append("\n");
            sb.Append("  FltPayFreq: ").Append(FltPayFreq).Append("\n");
            sb.Append("  HistCouponDates: ").Append(HistCouponDates).Append("\n");
            sb.Append("  HistCoupons: ").Append(HistCoupons).Append("\n");
            sb.Append("  HistRcvAssumpDates: ").Append(HistRcvAssumpDates).Append("\n");
            sb.Append("  HistRcvAssumpMonths: ").Append(HistRcvAssumpMonths).Append("\n");
            sb.Append("  HistRcvAssumpRates: ").Append(HistRcvAssumpRates).Append("\n");
            sb.Append("  HistRcvAssumpTargetDates: ").Append(HistRcvAssumpTargetDates).Append("\n");
            sb.Append("  InflationType: ").Append(InflationType).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  IssueName: ").Append(IssueName).Append("\n");
            sb.Append("  IssuerId: ").Append(IssuerId).Append("\n");
            sb.Append("  LastModifiedSource: ").Append(LastModifiedSource).Append("\n");
            sb.Append("  LastModifiedSourceMeta: ").Append(LastModifiedSourceMeta).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("  LifeCap: ").Append(LifeCap).Append("\n");
            sb.Append("  LifeFloor: ").Append(LifeFloor).Append("\n");
            sb.Append("  LockoutDays: ").Append(LockoutDays).Append("\n");
            sb.Append("  LookBackDays: ").Append(LookBackDays).Append("\n");
            sb.Append("  MakeWholeCallFlag: ").Append(MakeWholeCallFlag).Append("\n");
            sb.Append("  MakeWholeExpireDate: ").Append(MakeWholeExpireDate).Append("\n");
            sb.Append("  MakeWholeSpread: ").Append(MakeWholeSpread).Append("\n");
            sb.Append("  MatrixDates: ").Append(MatrixDates).Append("\n");
            sb.Append("  MatrixMultipliers: ").Append(MatrixMultipliers).Append("\n");
            sb.Append("  MatrixPricedFlag: ").Append(MatrixPricedFlag).Append("\n");
            sb.Append("  MatrixSpreads: ").Append(MatrixSpreads).Append("\n");
            sb.Append("  MatrixUseScheduleFlag: ").Append(MatrixUseScheduleFlag).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  MaturityPrice: ").Append(MaturityPrice).Append("\n");
            sb.Append("  MonthsToRecovery: ").Append(MonthsToRecovery).Append("\n");
            sb.Append("  Multiplier: ").Append(Multiplier).Append("\n");
            sb.Append("  NotionalFlag: ").Append(NotionalFlag).Append("\n");
            sb.Append("  ObservationShift: ").Append(ObservationShift).Append("\n");
            sb.Append("  OrigAmtIssued: ").Append(OrigAmtIssued).Append("\n");
            sb.Append("  ParentName: ").Append(ParentName).Append("\n");
            sb.Append("  ParPrice: ").Append(ParPrice).Append("\n");
            sb.Append("  ParserInfo: ").Append(ParserInfo).Append("\n");
            sb.Append("  PaymentDelay: ").Append(PaymentDelay).Append("\n");
            sb.Append("  PayFreq: ").Append(PayFreq).Append("\n");
            sb.Append("  PeriodCap: ").Append(PeriodCap).Append("\n");
            sb.Append("  PeriodFloor: ").Append(PeriodFloor).Append("\n");
            sb.Append("  PikExpDate: ").Append(PikExpDate).Append("\n");
            sb.Append("  PikRate: ").Append(PikRate).Append("\n");
            sb.Append("  PreferredSecExDateLen: ").Append(PreferredSecExDateLen).Append("\n");
            sb.Append("  PreferredSecExDateUnits: ").Append(PreferredSecExDateUnits).Append("\n");
            sb.Append("  PreferredSecFlag: ").Append(PreferredSecFlag).Append("\n");
            sb.Append("  PreferredSecType: ").Append(PreferredSecType).Append("\n");
            sb.Append("  PrincipalType: ").Append(PrincipalType).Append("\n");
            sb.Append("  PutDates: ").Append(PutDates).Append("\n");
            sb.Append("  PutNoticeDays: ").Append(PutNoticeDays).Append("\n");
            sb.Append("  PutFreq: ").Append(PutFreq).Append("\n");
            sb.Append("  PutPrices: ").Append(PutPrices).Append("\n");
            sb.Append("  PvtPlacementFlag: ").Append(PvtPlacementFlag).Append("\n");
            sb.Append("  RatingFitch: ").Append(RatingFitch).Append("\n");
            sb.Append("  RatingFitchDates: ").Append(RatingFitchDates).Append("\n");
            sb.Append("  RatingFitchValues: ").Append(RatingFitchValues).Append("\n");
            sb.Append("  RatingMoodysDates: ").Append(RatingMoodysDates).Append("\n");
            sb.Append("  RatingMoodysValues: ").Append(RatingMoodysValues).Append("\n");
            sb.Append("  RatingSpDates: ").Append(RatingSpDates).Append("\n");
            sb.Append("  RatingSpValues: ").Append(RatingSpValues).Append("\n");
            sb.Append("  RecoveryPercentage: ").Append(RecoveryPercentage).Append("\n");
            sb.Append("  RedemptionDate: ").Append(RedemptionDate).Append("\n");
            sb.Append("  RedemptionOpt: ").Append(RedemptionOpt).Append("\n");
            sb.Append("  RedemptionPrice: ").Append(RedemptionPrice).Append("\n");
            sb.Append("  ReinstatedDate: ").Append(ReinstatedDate).Append("\n");
            sb.Append("  ResetDelay: ").Append(ResetDelay).Append("\n");
            sb.Append("  ResetFreq: ").Append(ResetFreq).Append("\n");
            sb.Append("  RefIndex: ").Append(RefIndex).Append("\n");
            sb.Append("  SecondaryToVendorFlag: ").Append(SecondaryToVendorFlag).Append("\n");
            sb.Append("  Sector: ").Append(Sector).Append("\n");
            sb.Append("  SectorBarclay1: ").Append(SectorBarclay1).Append("\n");
            sb.Append("  SectorBarclay2: ").Append(SectorBarclay2).Append("\n");
            sb.Append("  SectorBarclay3: ").Append(SectorBarclay3).Append("\n");
            sb.Append("  SectorBarclay4: ").Append(SectorBarclay4).Append("\n");
            sb.Append("  SectorDef: ").Append(SectorDef).Append("\n");
            sb.Append("  SectorIndustry: ").Append(SectorIndustry).Append("\n");
            sb.Append("  SectorMain: ").Append(SectorMain).Append("\n");
            sb.Append("  SectorMerrill1: ").Append(SectorMerrill1).Append("\n");
            sb.Append("  SectorMerrill2: ").Append(SectorMerrill2).Append("\n");
            sb.Append("  SectorMerrill3: ").Append(SectorMerrill3).Append("\n");
            sb.Append("  SectorMerrill4: ").Append(SectorMerrill4).Append("\n");
            sb.Append("  SectorSubGroup: ").Append(SectorSubGroup).Append("\n");
            sb.Append("  SinkAmts: ").Append(SinkAmts).Append("\n");
            sb.Append("  SinkDates: ").Append(SinkDates).Append("\n");
            sb.Append("  Spread: ").Append(Spread).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDates: ").Append(StatusDates).Append("\n");
            sb.Append("  StatusValues: ").Append(StatusValues).Append("\n");
            sb.Append("  StepCashRates: ").Append(StepCashRates).Append("\n");
            sb.Append("  StepCouponDates: ").Append(StepCouponDates).Append("\n");
            sb.Append("  StepCoupons: ").Append(StepCoupons).Append("\n");
            sb.Append("  StepPikRates: ").Append(StepPikRates).Append("\n");
            sb.Append("  VendorCoverageDate: ").Append(VendorCoverageDate).Append("\n");
            sb.Append("  VRDNFlag: ").Append(VRDNFlag).Append("\n");
            sb.Append("  SecurityType: ").Append(SecurityType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SMBondFields);
        }

        /// <summary>
        /// Returns true if SMBondFields instances are equal
        /// </summary>
        /// <param name="input">Instance of SMBondFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SMBondFields input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._144aFlag == input._144aFlag ||
                    this._144aFlag.Equals(input._144aFlag)
                ) && 
                (
                    this.AperiodicMultipliers == input.AperiodicMultipliers ||
                    this.AperiodicMultipliers != null &&
                    input.AperiodicMultipliers != null &&
                    this.AperiodicMultipliers.SequenceEqual(input.AperiodicMultipliers)
                ) && 
                (
                    this.AperiodicResetDates == input.AperiodicResetDates ||
                    this.AperiodicResetDates != null &&
                    input.AperiodicResetDates != null &&
                    this.AperiodicResetDates.SequenceEqual(input.AperiodicResetDates)
                ) && 
                (
                    this.AperiodicSpreads == input.AperiodicSpreads ||
                    this.AperiodicSpreads != null &&
                    input.AperiodicSpreads != null &&
                    this.AperiodicSpreads.SequenceEqual(input.AperiodicSpreads)
                ) && 
                (
                    this.BusinessDayConv == input.BusinessDayConv ||
                    (this.BusinessDayConv != null &&
                    this.BusinessDayConv.Equals(input.BusinessDayConv))
                ) && 
                (
                    this.CallAnnouncedDate == input.CallAnnouncedDate ||
                    (this.CallAnnouncedDate != null &&
                    this.CallAnnouncedDate.Equals(input.CallAnnouncedDate))
                ) && 
                (
                    this.CallDates == input.CallDates ||
                    this.CallDates != null &&
                    input.CallDates != null &&
                    this.CallDates.SequenceEqual(input.CallDates)
                ) && 
                (
                    this.CallFreq == input.CallFreq ||
                    (this.CallFreq != null &&
                    this.CallFreq.Equals(input.CallFreq))
                ) && 
                (
                    this.CallNoticeDays == input.CallNoticeDays ||
                    this.CallNoticeDays.Equals(input.CallNoticeDays)
                ) && 
                (
                    this.CallPrices == input.CallPrices ||
                    this.CallPrices != null &&
                    input.CallPrices != null &&
                    this.CallPrices.SequenceEqual(input.CallPrices)
                ) && 
                (
                    this.CashRate == input.CashRate ||
                    this.CashRate.Equals(input.CashRate)
                ) && 
                (
                    this.Cognity == input.Cognity ||
                    (this.Cognity != null &&
                    this.Cognity.Equals(input.Cognity))
                ) && 
                (
                    this.ConversionIdentifier == input.ConversionIdentifier ||
                    (this.ConversionIdentifier != null &&
                    this.ConversionIdentifier.Equals(input.ConversionIdentifier))
                ) && 
                (
                    this.ConversionRatio == input.ConversionRatio ||
                    this.ConversionRatio.Equals(input.ConversionRatio)
                ) && 
                (
                    this.ConversionType == input.ConversionType ||
                    (this.ConversionType != null &&
                    this.ConversionType.Equals(input.ConversionType))
                ) && 
                (
                    this.ConvertibleFlag == input.ConvertibleFlag ||
                    this.ConvertibleFlag.Equals(input.ConvertibleFlag)
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Coupon == input.Coupon ||
                    this.Coupon.Equals(input.Coupon)
                ) && 
                (
                    this.CouponType == input.CouponType ||
                    (this.CouponType != null &&
                    this.CouponType.Equals(input.CouponType))
                ) && 
                (
                    this.CreditSpreadAdjustmentSingle == input.CreditSpreadAdjustmentSingle ||
                    this.CreditSpreadAdjustmentSingle.Equals(input.CreditSpreadAdjustmentSingle)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.DayCountBasis == input.DayCountBasis ||
                    (this.DayCountBasis != null &&
                    this.DayCountBasis.Equals(input.DayCountBasis))
                ) && 
                (
                    this.DefaultedDate == input.DefaultedDate ||
                    (this.DefaultedDate != null &&
                    this.DefaultedDate.Equals(input.DefaultedDate))
                ) && 
                (
                    this.FederalTaxExemptFlag == input.FederalTaxExemptFlag ||
                    this.FederalTaxExemptFlag.Equals(input.FederalTaxExemptFlag)
                ) && 
                (
                    this.FirstPayDate == input.FirstPayDate ||
                    (this.FirstPayDate != null &&
                    this.FirstPayDate.Equals(input.FirstPayDate))
                ) && 
                (
                    this.FirstResetDate == input.FirstResetDate ||
                    (this.FirstResetDate != null &&
                    this.FirstResetDate.Equals(input.FirstResetDate))
                ) && 
                (
                    this.FloatFormula == input.FloatFormula ||
                    (this.FloatFormula != null &&
                    this.FloatFormula.Equals(input.FloatFormula))
                ) && 
                (
                    this.FltDayCountBasis == input.FltDayCountBasis ||
                    (this.FltDayCountBasis != null &&
                    this.FltDayCountBasis.Equals(input.FltDayCountBasis))
                ) && 
                (
                    this.FltFirstPayDate == input.FltFirstPayDate ||
                    (this.FltFirstPayDate != null &&
                    this.FltFirstPayDate.Equals(input.FltFirstPayDate))
                ) && 
                (
                    this.FltPayFreq == input.FltPayFreq ||
                    (this.FltPayFreq != null &&
                    this.FltPayFreq.Equals(input.FltPayFreq))
                ) && 
                (
                    this.HistCouponDates == input.HistCouponDates ||
                    this.HistCouponDates != null &&
                    input.HistCouponDates != null &&
                    this.HistCouponDates.SequenceEqual(input.HistCouponDates)
                ) && 
                (
                    this.HistCoupons == input.HistCoupons ||
                    this.HistCoupons != null &&
                    input.HistCoupons != null &&
                    this.HistCoupons.SequenceEqual(input.HistCoupons)
                ) && 
                (
                    this.HistRcvAssumpDates == input.HistRcvAssumpDates ||
                    this.HistRcvAssumpDates != null &&
                    input.HistRcvAssumpDates != null &&
                    this.HistRcvAssumpDates.SequenceEqual(input.HistRcvAssumpDates)
                ) && 
                (
                    this.HistRcvAssumpMonths == input.HistRcvAssumpMonths ||
                    this.HistRcvAssumpMonths != null &&
                    input.HistRcvAssumpMonths != null &&
                    this.HistRcvAssumpMonths.SequenceEqual(input.HistRcvAssumpMonths)
                ) && 
                (
                    this.HistRcvAssumpRates == input.HistRcvAssumpRates ||
                    this.HistRcvAssumpRates != null &&
                    input.HistRcvAssumpRates != null &&
                    this.HistRcvAssumpRates.SequenceEqual(input.HistRcvAssumpRates)
                ) && 
                (
                    this.HistRcvAssumpTargetDates == input.HistRcvAssumpTargetDates ||
                    this.HistRcvAssumpTargetDates != null &&
                    input.HistRcvAssumpTargetDates != null &&
                    this.HistRcvAssumpTargetDates.SequenceEqual(input.HistRcvAssumpTargetDates)
                ) && 
                (
                    this.InflationType == input.InflationType ||
                    (this.InflationType != null &&
                    this.InflationType.Equals(input.InflationType))
                ) && 
                (
                    this.IssueDate == input.IssueDate ||
                    (this.IssueDate != null &&
                    this.IssueDate.Equals(input.IssueDate))
                ) && 
                (
                    this.IssueName == input.IssueName ||
                    (this.IssueName != null &&
                    this.IssueName.Equals(input.IssueName))
                ) && 
                (
                    this.IssuerId == input.IssuerId ||
                    (this.IssuerId != null &&
                    this.IssuerId.Equals(input.IssuerId))
                ) && 
                (
                    this.LastModifiedSource == input.LastModifiedSource ||
                    (this.LastModifiedSource != null &&
                    this.LastModifiedSource.Equals(input.LastModifiedSource))
                ) && 
                (
                    this.LastModifiedSourceMeta == input.LastModifiedSourceMeta ||
                    (this.LastModifiedSourceMeta != null &&
                    this.LastModifiedSourceMeta.Equals(input.LastModifiedSourceMeta))
                ) && 
                (
                    this.LastModifiedTime == input.LastModifiedTime ||
                    (this.LastModifiedTime != null &&
                    this.LastModifiedTime.Equals(input.LastModifiedTime))
                ) && 
                (
                    this.LifeCap == input.LifeCap ||
                    this.LifeCap.Equals(input.LifeCap)
                ) && 
                (
                    this.LifeFloor == input.LifeFloor ||
                    this.LifeFloor.Equals(input.LifeFloor)
                ) && 
                (
                    this.LockoutDays == input.LockoutDays ||
                    this.LockoutDays.Equals(input.LockoutDays)
                ) && 
                (
                    this.LookBackDays == input.LookBackDays ||
                    this.LookBackDays.Equals(input.LookBackDays)
                ) && 
                (
                    this.MakeWholeCallFlag == input.MakeWholeCallFlag ||
                    this.MakeWholeCallFlag.Equals(input.MakeWholeCallFlag)
                ) && 
                (
                    this.MakeWholeExpireDate == input.MakeWholeExpireDate ||
                    (this.MakeWholeExpireDate != null &&
                    this.MakeWholeExpireDate.Equals(input.MakeWholeExpireDate))
                ) && 
                (
                    this.MakeWholeSpread == input.MakeWholeSpread ||
                    this.MakeWholeSpread.Equals(input.MakeWholeSpread)
                ) && 
                (
                    this.MatrixDates == input.MatrixDates ||
                    this.MatrixDates != null &&
                    input.MatrixDates != null &&
                    this.MatrixDates.SequenceEqual(input.MatrixDates)
                ) && 
                (
                    this.MatrixMultipliers == input.MatrixMultipliers ||
                    this.MatrixMultipliers != null &&
                    input.MatrixMultipliers != null &&
                    this.MatrixMultipliers.SequenceEqual(input.MatrixMultipliers)
                ) && 
                (
                    this.MatrixPricedFlag == input.MatrixPricedFlag ||
                    this.MatrixPricedFlag.Equals(input.MatrixPricedFlag)
                ) && 
                (
                    this.MatrixSpreads == input.MatrixSpreads ||
                    this.MatrixSpreads != null &&
                    input.MatrixSpreads != null &&
                    this.MatrixSpreads.SequenceEqual(input.MatrixSpreads)
                ) && 
                (
                    this.MatrixUseScheduleFlag == input.MatrixUseScheduleFlag ||
                    this.MatrixUseScheduleFlag.Equals(input.MatrixUseScheduleFlag)
                ) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && 
                (
                    this.MaturityPrice == input.MaturityPrice ||
                    this.MaturityPrice.Equals(input.MaturityPrice)
                ) && 
                (
                    this.MonthsToRecovery == input.MonthsToRecovery ||
                    this.MonthsToRecovery.Equals(input.MonthsToRecovery)
                ) && 
                (
                    this.Multiplier == input.Multiplier ||
                    this.Multiplier.Equals(input.Multiplier)
                ) && 
                (
                    this.NotionalFlag == input.NotionalFlag ||
                    this.NotionalFlag.Equals(input.NotionalFlag)
                ) && 
                (
                    this.ObservationShift == input.ObservationShift ||
                    this.ObservationShift.Equals(input.ObservationShift)
                ) && 
                (
                    this.OrigAmtIssued == input.OrigAmtIssued ||
                    this.OrigAmtIssued.Equals(input.OrigAmtIssued)
                ) && 
                (
                    this.ParentName == input.ParentName ||
                    (this.ParentName != null &&
                    this.ParentName.Equals(input.ParentName))
                ) && 
                (
                    this.ParPrice == input.ParPrice ||
                    this.ParPrice.Equals(input.ParPrice)
                ) && 
                (
                    this.ParserInfo == input.ParserInfo ||
                    (this.ParserInfo != null &&
                    this.ParserInfo.Equals(input.ParserInfo))
                ) && 
                (
                    this.PaymentDelay == input.PaymentDelay ||
                    this.PaymentDelay.Equals(input.PaymentDelay)
                ) && 
                (
                    this.PayFreq == input.PayFreq ||
                    (this.PayFreq != null &&
                    this.PayFreq.Equals(input.PayFreq))
                ) && 
                (
                    this.PeriodCap == input.PeriodCap ||
                    this.PeriodCap.Equals(input.PeriodCap)
                ) && 
                (
                    this.PeriodFloor == input.PeriodFloor ||
                    this.PeriodFloor.Equals(input.PeriodFloor)
                ) && 
                (
                    this.PikExpDate == input.PikExpDate ||
                    (this.PikExpDate != null &&
                    this.PikExpDate.Equals(input.PikExpDate))
                ) && 
                (
                    this.PikRate == input.PikRate ||
                    this.PikRate.Equals(input.PikRate)
                ) && 
                (
                    this.PreferredSecExDateLen == input.PreferredSecExDateLen ||
                    this.PreferredSecExDateLen.Equals(input.PreferredSecExDateLen)
                ) && 
                (
                    this.PreferredSecExDateUnits == input.PreferredSecExDateUnits ||
                    (this.PreferredSecExDateUnits != null &&
                    this.PreferredSecExDateUnits.Equals(input.PreferredSecExDateUnits))
                ) && 
                (
                    this.PreferredSecFlag == input.PreferredSecFlag ||
                    this.PreferredSecFlag.Equals(input.PreferredSecFlag)
                ) && 
                (
                    this.PreferredSecType == input.PreferredSecType ||
                    (this.PreferredSecType != null &&
                    this.PreferredSecType.Equals(input.PreferredSecType))
                ) && 
                (
                    this.PrincipalType == input.PrincipalType ||
                    (this.PrincipalType != null &&
                    this.PrincipalType.Equals(input.PrincipalType))
                ) && 
                (
                    this.PutDates == input.PutDates ||
                    this.PutDates != null &&
                    input.PutDates != null &&
                    this.PutDates.SequenceEqual(input.PutDates)
                ) && 
                (
                    this.PutNoticeDays == input.PutNoticeDays ||
                    this.PutNoticeDays.Equals(input.PutNoticeDays)
                ) && 
                (
                    this.PutFreq == input.PutFreq ||
                    (this.PutFreq != null &&
                    this.PutFreq.Equals(input.PutFreq))
                ) && 
                (
                    this.PutPrices == input.PutPrices ||
                    this.PutPrices != null &&
                    input.PutPrices != null &&
                    this.PutPrices.SequenceEqual(input.PutPrices)
                ) && 
                (
                    this.PvtPlacementFlag == input.PvtPlacementFlag ||
                    this.PvtPlacementFlag.Equals(input.PvtPlacementFlag)
                ) && 
                (
                    this.RatingFitch == input.RatingFitch ||
                    (this.RatingFitch != null &&
                    this.RatingFitch.Equals(input.RatingFitch))
                ) && 
                (
                    this.RatingFitchDates == input.RatingFitchDates ||
                    this.RatingFitchDates != null &&
                    input.RatingFitchDates != null &&
                    this.RatingFitchDates.SequenceEqual(input.RatingFitchDates)
                ) && 
                (
                    this.RatingFitchValues == input.RatingFitchValues ||
                    this.RatingFitchValues != null &&
                    input.RatingFitchValues != null &&
                    this.RatingFitchValues.SequenceEqual(input.RatingFitchValues)
                ) && 
                (
                    this.RatingMoodysDates == input.RatingMoodysDates ||
                    this.RatingMoodysDates != null &&
                    input.RatingMoodysDates != null &&
                    this.RatingMoodysDates.SequenceEqual(input.RatingMoodysDates)
                ) && 
                (
                    this.RatingMoodysValues == input.RatingMoodysValues ||
                    this.RatingMoodysValues != null &&
                    input.RatingMoodysValues != null &&
                    this.RatingMoodysValues.SequenceEqual(input.RatingMoodysValues)
                ) && 
                (
                    this.RatingSpDates == input.RatingSpDates ||
                    this.RatingSpDates != null &&
                    input.RatingSpDates != null &&
                    this.RatingSpDates.SequenceEqual(input.RatingSpDates)
                ) && 
                (
                    this.RatingSpValues == input.RatingSpValues ||
                    this.RatingSpValues != null &&
                    input.RatingSpValues != null &&
                    this.RatingSpValues.SequenceEqual(input.RatingSpValues)
                ) && 
                (
                    this.RecoveryPercentage == input.RecoveryPercentage ||
                    this.RecoveryPercentage.Equals(input.RecoveryPercentage)
                ) && 
                (
                    this.RedemptionDate == input.RedemptionDate ||
                    (this.RedemptionDate != null &&
                    this.RedemptionDate.Equals(input.RedemptionDate))
                ) && 
                (
                    this.RedemptionOpt == input.RedemptionOpt ||
                    (this.RedemptionOpt != null &&
                    this.RedemptionOpt.Equals(input.RedemptionOpt))
                ) && 
                (
                    this.RedemptionPrice == input.RedemptionPrice ||
                    this.RedemptionPrice.Equals(input.RedemptionPrice)
                ) && 
                (
                    this.ReinstatedDate == input.ReinstatedDate ||
                    (this.ReinstatedDate != null &&
                    this.ReinstatedDate.Equals(input.ReinstatedDate))
                ) && 
                (
                    this.ResetDelay == input.ResetDelay ||
                    this.ResetDelay.Equals(input.ResetDelay)
                ) && 
                (
                    this.ResetFreq == input.ResetFreq ||
                    (this.ResetFreq != null &&
                    this.ResetFreq.Equals(input.ResetFreq))
                ) && 
                (
                    this.RefIndex == input.RefIndex ||
                    (this.RefIndex != null &&
                    this.RefIndex.Equals(input.RefIndex))
                ) && 
                (
                    this.SecondaryToVendorFlag == input.SecondaryToVendorFlag ||
                    this.SecondaryToVendorFlag.Equals(input.SecondaryToVendorFlag)
                ) && 
                (
                    this.Sector == input.Sector ||
                    (this.Sector != null &&
                    this.Sector.Equals(input.Sector))
                ) && 
                (
                    this.SectorBarclay1 == input.SectorBarclay1 ||
                    (this.SectorBarclay1 != null &&
                    this.SectorBarclay1.Equals(input.SectorBarclay1))
                ) && 
                (
                    this.SectorBarclay2 == input.SectorBarclay2 ||
                    (this.SectorBarclay2 != null &&
                    this.SectorBarclay2.Equals(input.SectorBarclay2))
                ) && 
                (
                    this.SectorBarclay3 == input.SectorBarclay3 ||
                    (this.SectorBarclay3 != null &&
                    this.SectorBarclay3.Equals(input.SectorBarclay3))
                ) && 
                (
                    this.SectorBarclay4 == input.SectorBarclay4 ||
                    (this.SectorBarclay4 != null &&
                    this.SectorBarclay4.Equals(input.SectorBarclay4))
                ) && 
                (
                    this.SectorDef == input.SectorDef ||
                    (this.SectorDef != null &&
                    this.SectorDef.Equals(input.SectorDef))
                ) && 
                (
                    this.SectorIndustry == input.SectorIndustry ||
                    (this.SectorIndustry != null &&
                    this.SectorIndustry.Equals(input.SectorIndustry))
                ) && 
                (
                    this.SectorMain == input.SectorMain ||
                    (this.SectorMain != null &&
                    this.SectorMain.Equals(input.SectorMain))
                ) && 
                (
                    this.SectorMerrill1 == input.SectorMerrill1 ||
                    (this.SectorMerrill1 != null &&
                    this.SectorMerrill1.Equals(input.SectorMerrill1))
                ) && 
                (
                    this.SectorMerrill2 == input.SectorMerrill2 ||
                    (this.SectorMerrill2 != null &&
                    this.SectorMerrill2.Equals(input.SectorMerrill2))
                ) && 
                (
                    this.SectorMerrill3 == input.SectorMerrill3 ||
                    (this.SectorMerrill3 != null &&
                    this.SectorMerrill3.Equals(input.SectorMerrill3))
                ) && 
                (
                    this.SectorMerrill4 == input.SectorMerrill4 ||
                    (this.SectorMerrill4 != null &&
                    this.SectorMerrill4.Equals(input.SectorMerrill4))
                ) && 
                (
                    this.SectorSubGroup == input.SectorSubGroup ||
                    (this.SectorSubGroup != null &&
                    this.SectorSubGroup.Equals(input.SectorSubGroup))
                ) && 
                (
                    this.SinkAmts == input.SinkAmts ||
                    this.SinkAmts != null &&
                    input.SinkAmts != null &&
                    this.SinkAmts.SequenceEqual(input.SinkAmts)
                ) && 
                (
                    this.SinkDates == input.SinkDates ||
                    this.SinkDates != null &&
                    input.SinkDates != null &&
                    this.SinkDates.SequenceEqual(input.SinkDates)
                ) && 
                (
                    this.Spread == input.Spread ||
                    this.Spread.Equals(input.Spread)
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusDates == input.StatusDates ||
                    this.StatusDates != null &&
                    input.StatusDates != null &&
                    this.StatusDates.SequenceEqual(input.StatusDates)
                ) && 
                (
                    this.StatusValues == input.StatusValues ||
                    this.StatusValues != null &&
                    input.StatusValues != null &&
                    this.StatusValues.SequenceEqual(input.StatusValues)
                ) && 
                (
                    this.StepCashRates == input.StepCashRates ||
                    this.StepCashRates != null &&
                    input.StepCashRates != null &&
                    this.StepCashRates.SequenceEqual(input.StepCashRates)
                ) && 
                (
                    this.StepCouponDates == input.StepCouponDates ||
                    this.StepCouponDates != null &&
                    input.StepCouponDates != null &&
                    this.StepCouponDates.SequenceEqual(input.StepCouponDates)
                ) && 
                (
                    this.StepCoupons == input.StepCoupons ||
                    this.StepCoupons != null &&
                    input.StepCoupons != null &&
                    this.StepCoupons.SequenceEqual(input.StepCoupons)
                ) && 
                (
                    this.StepPikRates == input.StepPikRates ||
                    this.StepPikRates != null &&
                    input.StepPikRates != null &&
                    this.StepPikRates.SequenceEqual(input.StepPikRates)
                ) && 
                (
                    this.VendorCoverageDate == input.VendorCoverageDate ||
                    (this.VendorCoverageDate != null &&
                    this.VendorCoverageDate.Equals(input.VendorCoverageDate))
                ) && 
                (
                    this.VRDNFlag == input.VRDNFlag ||
                    this.VRDNFlag.Equals(input.VRDNFlag)
                ) && 
                (
                    this.SecurityType == input.SecurityType ||
                    this.SecurityType.Equals(input.SecurityType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this._144aFlag.GetHashCode();
                if (this.AperiodicMultipliers != null)
                    hashCode = hashCode * 59 + this.AperiodicMultipliers.GetHashCode();
                if (this.AperiodicResetDates != null)
                    hashCode = hashCode * 59 + this.AperiodicResetDates.GetHashCode();
                if (this.AperiodicSpreads != null)
                    hashCode = hashCode * 59 + this.AperiodicSpreads.GetHashCode();
                if (this.BusinessDayConv != null)
                    hashCode = hashCode * 59 + this.BusinessDayConv.GetHashCode();
                if (this.CallAnnouncedDate != null)
                    hashCode = hashCode * 59 + this.CallAnnouncedDate.GetHashCode();
                if (this.CallDates != null)
                    hashCode = hashCode * 59 + this.CallDates.GetHashCode();
                if (this.CallFreq != null)
                    hashCode = hashCode * 59 + this.CallFreq.GetHashCode();
                hashCode = hashCode * 59 + this.CallNoticeDays.GetHashCode();
                if (this.CallPrices != null)
                    hashCode = hashCode * 59 + this.CallPrices.GetHashCode();
                hashCode = hashCode * 59 + this.CashRate.GetHashCode();
                if (this.Cognity != null)
                    hashCode = hashCode * 59 + this.Cognity.GetHashCode();
                if (this.ConversionIdentifier != null)
                    hashCode = hashCode * 59 + this.ConversionIdentifier.GetHashCode();
                hashCode = hashCode * 59 + this.ConversionRatio.GetHashCode();
                if (this.ConversionType != null)
                    hashCode = hashCode * 59 + this.ConversionType.GetHashCode();
                hashCode = hashCode * 59 + this.ConvertibleFlag.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                hashCode = hashCode * 59 + this.Coupon.GetHashCode();
                if (this.CouponType != null)
                    hashCode = hashCode * 59 + this.CouponType.GetHashCode();
                hashCode = hashCode * 59 + this.CreditSpreadAdjustmentSingle.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.DayCountBasis != null)
                    hashCode = hashCode * 59 + this.DayCountBasis.GetHashCode();
                if (this.DefaultedDate != null)
                    hashCode = hashCode * 59 + this.DefaultedDate.GetHashCode();
                hashCode = hashCode * 59 + this.FederalTaxExemptFlag.GetHashCode();
                if (this.FirstPayDate != null)
                    hashCode = hashCode * 59 + this.FirstPayDate.GetHashCode();
                if (this.FirstResetDate != null)
                    hashCode = hashCode * 59 + this.FirstResetDate.GetHashCode();
                if (this.FloatFormula != null)
                    hashCode = hashCode * 59 + this.FloatFormula.GetHashCode();
                if (this.FltDayCountBasis != null)
                    hashCode = hashCode * 59 + this.FltDayCountBasis.GetHashCode();
                if (this.FltFirstPayDate != null)
                    hashCode = hashCode * 59 + this.FltFirstPayDate.GetHashCode();
                if (this.FltPayFreq != null)
                    hashCode = hashCode * 59 + this.FltPayFreq.GetHashCode();
                if (this.HistCouponDates != null)
                    hashCode = hashCode * 59 + this.HistCouponDates.GetHashCode();
                if (this.HistCoupons != null)
                    hashCode = hashCode * 59 + this.HistCoupons.GetHashCode();
                if (this.HistRcvAssumpDates != null)
                    hashCode = hashCode * 59 + this.HistRcvAssumpDates.GetHashCode();
                if (this.HistRcvAssumpMonths != null)
                    hashCode = hashCode * 59 + this.HistRcvAssumpMonths.GetHashCode();
                if (this.HistRcvAssumpRates != null)
                    hashCode = hashCode * 59 + this.HistRcvAssumpRates.GetHashCode();
                if (this.HistRcvAssumpTargetDates != null)
                    hashCode = hashCode * 59 + this.HistRcvAssumpTargetDates.GetHashCode();
                if (this.InflationType != null)
                    hashCode = hashCode * 59 + this.InflationType.GetHashCode();
                if (this.IssueDate != null)
                    hashCode = hashCode * 59 + this.IssueDate.GetHashCode();
                if (this.IssueName != null)
                    hashCode = hashCode * 59 + this.IssueName.GetHashCode();
                if (this.IssuerId != null)
                    hashCode = hashCode * 59 + this.IssuerId.GetHashCode();
                if (this.LastModifiedSource != null)
                    hashCode = hashCode * 59 + this.LastModifiedSource.GetHashCode();
                if (this.LastModifiedSourceMeta != null)
                    hashCode = hashCode * 59 + this.LastModifiedSourceMeta.GetHashCode();
                if (this.LastModifiedTime != null)
                    hashCode = hashCode * 59 + this.LastModifiedTime.GetHashCode();
                hashCode = hashCode * 59 + this.LifeCap.GetHashCode();
                hashCode = hashCode * 59 + this.LifeFloor.GetHashCode();
                hashCode = hashCode * 59 + this.LockoutDays.GetHashCode();
                hashCode = hashCode * 59 + this.LookBackDays.GetHashCode();
                hashCode = hashCode * 59 + this.MakeWholeCallFlag.GetHashCode();
                if (this.MakeWholeExpireDate != null)
                    hashCode = hashCode * 59 + this.MakeWholeExpireDate.GetHashCode();
                hashCode = hashCode * 59 + this.MakeWholeSpread.GetHashCode();
                if (this.MatrixDates != null)
                    hashCode = hashCode * 59 + this.MatrixDates.GetHashCode();
                if (this.MatrixMultipliers != null)
                    hashCode = hashCode * 59 + this.MatrixMultipliers.GetHashCode();
                hashCode = hashCode * 59 + this.MatrixPricedFlag.GetHashCode();
                if (this.MatrixSpreads != null)
                    hashCode = hashCode * 59 + this.MatrixSpreads.GetHashCode();
                hashCode = hashCode * 59 + this.MatrixUseScheduleFlag.GetHashCode();
                if (this.MaturityDate != null)
                    hashCode = hashCode * 59 + this.MaturityDate.GetHashCode();
                hashCode = hashCode * 59 + this.MaturityPrice.GetHashCode();
                hashCode = hashCode * 59 + this.MonthsToRecovery.GetHashCode();
                hashCode = hashCode * 59 + this.Multiplier.GetHashCode();
                hashCode = hashCode * 59 + this.NotionalFlag.GetHashCode();
                hashCode = hashCode * 59 + this.ObservationShift.GetHashCode();
                hashCode = hashCode * 59 + this.OrigAmtIssued.GetHashCode();
                if (this.ParentName != null)
                    hashCode = hashCode * 59 + this.ParentName.GetHashCode();
                hashCode = hashCode * 59 + this.ParPrice.GetHashCode();
                if (this.ParserInfo != null)
                    hashCode = hashCode * 59 + this.ParserInfo.GetHashCode();
                hashCode = hashCode * 59 + this.PaymentDelay.GetHashCode();
                if (this.PayFreq != null)
                    hashCode = hashCode * 59 + this.PayFreq.GetHashCode();
                hashCode = hashCode * 59 + this.PeriodCap.GetHashCode();
                hashCode = hashCode * 59 + this.PeriodFloor.GetHashCode();
                if (this.PikExpDate != null)
                    hashCode = hashCode * 59 + this.PikExpDate.GetHashCode();
                hashCode = hashCode * 59 + this.PikRate.GetHashCode();
                hashCode = hashCode * 59 + this.PreferredSecExDateLen.GetHashCode();
                if (this.PreferredSecExDateUnits != null)
                    hashCode = hashCode * 59 + this.PreferredSecExDateUnits.GetHashCode();
                hashCode = hashCode * 59 + this.PreferredSecFlag.GetHashCode();
                if (this.PreferredSecType != null)
                    hashCode = hashCode * 59 + this.PreferredSecType.GetHashCode();
                if (this.PrincipalType != null)
                    hashCode = hashCode * 59 + this.PrincipalType.GetHashCode();
                if (this.PutDates != null)
                    hashCode = hashCode * 59 + this.PutDates.GetHashCode();
                hashCode = hashCode * 59 + this.PutNoticeDays.GetHashCode();
                if (this.PutFreq != null)
                    hashCode = hashCode * 59 + this.PutFreq.GetHashCode();
                if (this.PutPrices != null)
                    hashCode = hashCode * 59 + this.PutPrices.GetHashCode();
                hashCode = hashCode * 59 + this.PvtPlacementFlag.GetHashCode();
                if (this.RatingFitch != null)
                    hashCode = hashCode * 59 + this.RatingFitch.GetHashCode();
                if (this.RatingFitchDates != null)
                    hashCode = hashCode * 59 + this.RatingFitchDates.GetHashCode();
                if (this.RatingFitchValues != null)
                    hashCode = hashCode * 59 + this.RatingFitchValues.GetHashCode();
                if (this.RatingMoodysDates != null)
                    hashCode = hashCode * 59 + this.RatingMoodysDates.GetHashCode();
                if (this.RatingMoodysValues != null)
                    hashCode = hashCode * 59 + this.RatingMoodysValues.GetHashCode();
                if (this.RatingSpDates != null)
                    hashCode = hashCode * 59 + this.RatingSpDates.GetHashCode();
                if (this.RatingSpValues != null)
                    hashCode = hashCode * 59 + this.RatingSpValues.GetHashCode();
                hashCode = hashCode * 59 + this.RecoveryPercentage.GetHashCode();
                if (this.RedemptionDate != null)
                    hashCode = hashCode * 59 + this.RedemptionDate.GetHashCode();
                if (this.RedemptionOpt != null)
                    hashCode = hashCode * 59 + this.RedemptionOpt.GetHashCode();
                hashCode = hashCode * 59 + this.RedemptionPrice.GetHashCode();
                if (this.ReinstatedDate != null)
                    hashCode = hashCode * 59 + this.ReinstatedDate.GetHashCode();
                hashCode = hashCode * 59 + this.ResetDelay.GetHashCode();
                if (this.ResetFreq != null)
                    hashCode = hashCode * 59 + this.ResetFreq.GetHashCode();
                if (this.RefIndex != null)
                    hashCode = hashCode * 59 + this.RefIndex.GetHashCode();
                hashCode = hashCode * 59 + this.SecondaryToVendorFlag.GetHashCode();
                if (this.Sector != null)
                    hashCode = hashCode * 59 + this.Sector.GetHashCode();
                if (this.SectorBarclay1 != null)
                    hashCode = hashCode * 59 + this.SectorBarclay1.GetHashCode();
                if (this.SectorBarclay2 != null)
                    hashCode = hashCode * 59 + this.SectorBarclay2.GetHashCode();
                if (this.SectorBarclay3 != null)
                    hashCode = hashCode * 59 + this.SectorBarclay3.GetHashCode();
                if (this.SectorBarclay4 != null)
                    hashCode = hashCode * 59 + this.SectorBarclay4.GetHashCode();
                if (this.SectorDef != null)
                    hashCode = hashCode * 59 + this.SectorDef.GetHashCode();
                if (this.SectorIndustry != null)
                    hashCode = hashCode * 59 + this.SectorIndustry.GetHashCode();
                if (this.SectorMain != null)
                    hashCode = hashCode * 59 + this.SectorMain.GetHashCode();
                if (this.SectorMerrill1 != null)
                    hashCode = hashCode * 59 + this.SectorMerrill1.GetHashCode();
                if (this.SectorMerrill2 != null)
                    hashCode = hashCode * 59 + this.SectorMerrill2.GetHashCode();
                if (this.SectorMerrill3 != null)
                    hashCode = hashCode * 59 + this.SectorMerrill3.GetHashCode();
                if (this.SectorMerrill4 != null)
                    hashCode = hashCode * 59 + this.SectorMerrill4.GetHashCode();
                if (this.SectorSubGroup != null)
                    hashCode = hashCode * 59 + this.SectorSubGroup.GetHashCode();
                if (this.SinkAmts != null)
                    hashCode = hashCode * 59 + this.SinkAmts.GetHashCode();
                if (this.SinkDates != null)
                    hashCode = hashCode * 59 + this.SinkDates.GetHashCode();
                hashCode = hashCode * 59 + this.Spread.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusDates != null)
                    hashCode = hashCode * 59 + this.StatusDates.GetHashCode();
                if (this.StatusValues != null)
                    hashCode = hashCode * 59 + this.StatusValues.GetHashCode();
                if (this.StepCashRates != null)
                    hashCode = hashCode * 59 + this.StepCashRates.GetHashCode();
                if (this.StepCouponDates != null)
                    hashCode = hashCode * 59 + this.StepCouponDates.GetHashCode();
                if (this.StepCoupons != null)
                    hashCode = hashCode * 59 + this.StepCoupons.GetHashCode();
                if (this.StepPikRates != null)
                    hashCode = hashCode * 59 + this.StepPikRates.GetHashCode();
                if (this.VendorCoverageDate != null)
                    hashCode = hashCode * 59 + this.VendorCoverageDate.GetHashCode();
                hashCode = hashCode * 59 + this.VRDNFlag.GetHashCode();
                hashCode = hashCode * 59 + this.SecurityType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
