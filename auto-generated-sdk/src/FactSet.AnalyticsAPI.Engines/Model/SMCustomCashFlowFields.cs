/*
 * Engines API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: v3:[pa,vault,pub,quant,fi,axp,afi,npo,bpm,fpo,security-modeling,others],v1:[fiab]
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.AnalyticsAPI.Engines.Client.OpenAPIDateConverter;

namespace FactSet.AnalyticsAPI.Engines.Model
{
    /// <summary>
    /// SMCustomCashFlowFields
    /// </summary>
    [DataContract(Name = "SMCustomCashFlowFields")]
    public partial class SMCustomCashFlowFields : IEquatable<SMCustomCashFlowFields>, IValidatableObject
    {
        /// <summary>
        /// Defines SecurityType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SecurityTypeEnum
        {
            /// <summary>
            /// Enum Bond for value: Bond
            /// </summary>
            [EnumMember(Value = "Bond")]
            Bond = 1,

            /// <summary>
            /// Enum CCF for value: CCF
            /// </summary>
            [EnumMember(Value = "CCF")]
            CCF = 2

        }

        /// <summary>
        /// Gets or Sets SecurityType
        /// </summary>
        [DataMember(Name = "securityType", IsRequired = true, EmitDefaultValue = false)]
        public SecurityTypeEnum SecurityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SMCustomCashFlowFields" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SMCustomCashFlowFields() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SMCustomCashFlowFields" /> class.
        /// </summary>
        /// <param name="cashFlowAmounts">cashFlowAmounts.</param>
        /// <param name="cashFlowDates">cashFlowDates.</param>
        /// <param name="country">country.</param>
        /// <param name="currency">currency.</param>
        /// <param name="issueName">issueName.</param>
        /// <param name="parAmt">parAmt.</param>
        /// <param name="parentName">parentName.</param>
        /// <param name="ratingFitch">ratingFitch.</param>
        /// <param name="ratingFitchDates">ratingFitchDates.</param>
        /// <param name="ratingFitchValues">ratingFitchValues.</param>
        /// <param name="ratingMoodysDates">ratingMoodysDates.</param>
        /// <param name="ratingMoodysValues">ratingMoodysValues.</param>
        /// <param name="ratingSpDates">ratingSpDates.</param>
        /// <param name="ratingSpValues">ratingSpValues.</param>
        /// <param name="secondaryToVendorFlag">secondaryToVendorFlag.</param>
        /// <param name="sector">sector.</param>
        /// <param name="sectorBarclay1">sectorBarclay1.</param>
        /// <param name="sectorBarclay2">sectorBarclay2.</param>
        /// <param name="sectorBarclay3">sectorBarclay3.</param>
        /// <param name="sectorBarclay4">sectorBarclay4.</param>
        /// <param name="sectorDef">sectorDef.</param>
        /// <param name="sectorIndustry">sectorIndustry.</param>
        /// <param name="sectorMain">sectorMain.</param>
        /// <param name="sectorMerrill1">sectorMerrill1.</param>
        /// <param name="sectorMerrill2">sectorMerrill2.</param>
        /// <param name="sectorMerrill3">sectorMerrill3.</param>
        /// <param name="sectorMerrill4">sectorMerrill4.</param>
        /// <param name="sectorSubGroup">sectorSubGroup.</param>
        /// <param name="vendorCoverageDate">vendorCoverageDate.</param>
        /// <param name="securityType">securityType (required).</param>
        public SMCustomCashFlowFields(List<double> cashFlowAmounts = default(List<double>), List<string> cashFlowDates = default(List<string>), string country = default(string), string currency = default(string), string issueName = default(string), double parAmt = default(double), string parentName = default(string), string ratingFitch = default(string), List<string> ratingFitchDates = default(List<string>), List<string> ratingFitchValues = default(List<string>), List<string> ratingMoodysDates = default(List<string>), List<string> ratingMoodysValues = default(List<string>), List<string> ratingSpDates = default(List<string>), List<string> ratingSpValues = default(List<string>), bool secondaryToVendorFlag = default(bool), string sector = default(string), string sectorBarclay1 = default(string), string sectorBarclay2 = default(string), string sectorBarclay3 = default(string), string sectorBarclay4 = default(string), string sectorDef = default(string), string sectorIndustry = default(string), string sectorMain = default(string), string sectorMerrill1 = default(string), string sectorMerrill2 = default(string), string sectorMerrill3 = default(string), string sectorMerrill4 = default(string), string sectorSubGroup = default(string), string vendorCoverageDate = default(string), SecurityTypeEnum securityType = default(SecurityTypeEnum))
        {
            this.SecurityType = securityType;
            this.CashFlowAmounts = cashFlowAmounts;
            this.CashFlowDates = cashFlowDates;
            this.Country = country;
            this.Currency = currency;
            this.IssueName = issueName;
            this.ParAmt = parAmt;
            this.ParentName = parentName;
            this.RatingFitch = ratingFitch;
            this.RatingFitchDates = ratingFitchDates;
            this.RatingFitchValues = ratingFitchValues;
            this.RatingMoodysDates = ratingMoodysDates;
            this.RatingMoodysValues = ratingMoodysValues;
            this.RatingSpDates = ratingSpDates;
            this.RatingSpValues = ratingSpValues;
            this.SecondaryToVendorFlag = secondaryToVendorFlag;
            this.Sector = sector;
            this.SectorBarclay1 = sectorBarclay1;
            this.SectorBarclay2 = sectorBarclay2;
            this.SectorBarclay3 = sectorBarclay3;
            this.SectorBarclay4 = sectorBarclay4;
            this.SectorDef = sectorDef;
            this.SectorIndustry = sectorIndustry;
            this.SectorMain = sectorMain;
            this.SectorMerrill1 = sectorMerrill1;
            this.SectorMerrill2 = sectorMerrill2;
            this.SectorMerrill3 = sectorMerrill3;
            this.SectorMerrill4 = sectorMerrill4;
            this.SectorSubGroup = sectorSubGroup;
            this.VendorCoverageDate = vendorCoverageDate;
        }

        /// <summary>
        /// Gets or Sets CashFlowAmounts
        /// </summary>
        [DataMember(Name = "cashFlowAmounts", EmitDefaultValue = false)]
        public List<double> CashFlowAmounts { get; set; }

        /// <summary>
        /// Gets or Sets CashFlowDates
        /// </summary>
        [DataMember(Name = "cashFlowDates", EmitDefaultValue = false)]
        public List<string> CashFlowDates { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets IssueName
        /// </summary>
        [DataMember(Name = "issueName", EmitDefaultValue = false)]
        public string IssueName { get; set; }

        /// <summary>
        /// Gets or Sets ParAmt
        /// </summary>
        [DataMember(Name = "parAmt", EmitDefaultValue = false)]
        public double ParAmt { get; set; }

        /// <summary>
        /// Gets or Sets ParentName
        /// </summary>
        [DataMember(Name = "parentName", EmitDefaultValue = false)]
        public string ParentName { get; set; }

        /// <summary>
        /// Gets or Sets RatingFitch
        /// </summary>
        [DataMember(Name = "ratingFitch", EmitDefaultValue = false)]
        public string RatingFitch { get; set; }

        /// <summary>
        /// Gets or Sets RatingFitchDates
        /// </summary>
        [DataMember(Name = "ratingFitchDates", EmitDefaultValue = false)]
        public List<string> RatingFitchDates { get; set; }

        /// <summary>
        /// Gets or Sets RatingFitchValues
        /// </summary>
        [DataMember(Name = "ratingFitchValues", EmitDefaultValue = false)]
        public List<string> RatingFitchValues { get; set; }

        /// <summary>
        /// Gets or Sets RatingMoodysDates
        /// </summary>
        [DataMember(Name = "ratingMoodysDates", EmitDefaultValue = false)]
        public List<string> RatingMoodysDates { get; set; }

        /// <summary>
        /// Gets or Sets RatingMoodysValues
        /// </summary>
        [DataMember(Name = "ratingMoodysValues", EmitDefaultValue = false)]
        public List<string> RatingMoodysValues { get; set; }

        /// <summary>
        /// Gets or Sets RatingSpDates
        /// </summary>
        [DataMember(Name = "ratingSpDates", EmitDefaultValue = false)]
        public List<string> RatingSpDates { get; set; }

        /// <summary>
        /// Gets or Sets RatingSpValues
        /// </summary>
        [DataMember(Name = "ratingSpValues", EmitDefaultValue = false)]
        public List<string> RatingSpValues { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryToVendorFlag
        /// </summary>
        [DataMember(Name = "secondaryToVendorFlag", EmitDefaultValue = false)]
        public bool SecondaryToVendorFlag { get; set; }

        /// <summary>
        /// Gets or Sets Sector
        /// </summary>
        [DataMember(Name = "sector", EmitDefaultValue = false)]
        public string Sector { get; set; }

        /// <summary>
        /// Gets or Sets SectorBarclay1
        /// </summary>
        [DataMember(Name = "sectorBarclay1", EmitDefaultValue = false)]
        public string SectorBarclay1 { get; set; }

        /// <summary>
        /// Gets or Sets SectorBarclay2
        /// </summary>
        [DataMember(Name = "sectorBarclay2", EmitDefaultValue = false)]
        public string SectorBarclay2 { get; set; }

        /// <summary>
        /// Gets or Sets SectorBarclay3
        /// </summary>
        [DataMember(Name = "sectorBarclay3", EmitDefaultValue = false)]
        public string SectorBarclay3 { get; set; }

        /// <summary>
        /// Gets or Sets SectorBarclay4
        /// </summary>
        [DataMember(Name = "sectorBarclay4", EmitDefaultValue = false)]
        public string SectorBarclay4 { get; set; }

        /// <summary>
        /// Gets or Sets SectorDef
        /// </summary>
        [DataMember(Name = "sectorDef", EmitDefaultValue = false)]
        public string SectorDef { get; set; }

        /// <summary>
        /// Gets or Sets SectorIndustry
        /// </summary>
        [DataMember(Name = "sectorIndustry", EmitDefaultValue = false)]
        public string SectorIndustry { get; set; }

        /// <summary>
        /// Gets or Sets SectorMain
        /// </summary>
        [DataMember(Name = "sectorMain", EmitDefaultValue = false)]
        public string SectorMain { get; set; }

        /// <summary>
        /// Gets or Sets SectorMerrill1
        /// </summary>
        [DataMember(Name = "sectorMerrill1", EmitDefaultValue = false)]
        public string SectorMerrill1 { get; set; }

        /// <summary>
        /// Gets or Sets SectorMerrill2
        /// </summary>
        [DataMember(Name = "sectorMerrill2", EmitDefaultValue = false)]
        public string SectorMerrill2 { get; set; }

        /// <summary>
        /// Gets or Sets SectorMerrill3
        /// </summary>
        [DataMember(Name = "sectorMerrill3", EmitDefaultValue = false)]
        public string SectorMerrill3 { get; set; }

        /// <summary>
        /// Gets or Sets SectorMerrill4
        /// </summary>
        [DataMember(Name = "sectorMerrill4", EmitDefaultValue = false)]
        public string SectorMerrill4 { get; set; }

        /// <summary>
        /// Gets or Sets SectorSubGroup
        /// </summary>
        [DataMember(Name = "sectorSubGroup", EmitDefaultValue = false)]
        public string SectorSubGroup { get; set; }

        /// <summary>
        /// Gets or Sets VendorCoverageDate
        /// </summary>
        [DataMember(Name = "vendorCoverageDate", EmitDefaultValue = false)]
        public string VendorCoverageDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SMCustomCashFlowFields {\n");
            sb.Append("  CashFlowAmounts: ").Append(CashFlowAmounts).Append("\n");
            sb.Append("  CashFlowDates: ").Append(CashFlowDates).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  IssueName: ").Append(IssueName).Append("\n");
            sb.Append("  ParAmt: ").Append(ParAmt).Append("\n");
            sb.Append("  ParentName: ").Append(ParentName).Append("\n");
            sb.Append("  RatingFitch: ").Append(RatingFitch).Append("\n");
            sb.Append("  RatingFitchDates: ").Append(RatingFitchDates).Append("\n");
            sb.Append("  RatingFitchValues: ").Append(RatingFitchValues).Append("\n");
            sb.Append("  RatingMoodysDates: ").Append(RatingMoodysDates).Append("\n");
            sb.Append("  RatingMoodysValues: ").Append(RatingMoodysValues).Append("\n");
            sb.Append("  RatingSpDates: ").Append(RatingSpDates).Append("\n");
            sb.Append("  RatingSpValues: ").Append(RatingSpValues).Append("\n");
            sb.Append("  SecondaryToVendorFlag: ").Append(SecondaryToVendorFlag).Append("\n");
            sb.Append("  Sector: ").Append(Sector).Append("\n");
            sb.Append("  SectorBarclay1: ").Append(SectorBarclay1).Append("\n");
            sb.Append("  SectorBarclay2: ").Append(SectorBarclay2).Append("\n");
            sb.Append("  SectorBarclay3: ").Append(SectorBarclay3).Append("\n");
            sb.Append("  SectorBarclay4: ").Append(SectorBarclay4).Append("\n");
            sb.Append("  SectorDef: ").Append(SectorDef).Append("\n");
            sb.Append("  SectorIndustry: ").Append(SectorIndustry).Append("\n");
            sb.Append("  SectorMain: ").Append(SectorMain).Append("\n");
            sb.Append("  SectorMerrill1: ").Append(SectorMerrill1).Append("\n");
            sb.Append("  SectorMerrill2: ").Append(SectorMerrill2).Append("\n");
            sb.Append("  SectorMerrill3: ").Append(SectorMerrill3).Append("\n");
            sb.Append("  SectorMerrill4: ").Append(SectorMerrill4).Append("\n");
            sb.Append("  SectorSubGroup: ").Append(SectorSubGroup).Append("\n");
            sb.Append("  VendorCoverageDate: ").Append(VendorCoverageDate).Append("\n");
            sb.Append("  SecurityType: ").Append(SecurityType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SMCustomCashFlowFields);
        }

        /// <summary>
        /// Returns true if SMCustomCashFlowFields instances are equal
        /// </summary>
        /// <param name="input">Instance of SMCustomCashFlowFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SMCustomCashFlowFields input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CashFlowAmounts == input.CashFlowAmounts ||
                    this.CashFlowAmounts != null &&
                    input.CashFlowAmounts != null &&
                    this.CashFlowAmounts.SequenceEqual(input.CashFlowAmounts)
                ) && 
                (
                    this.CashFlowDates == input.CashFlowDates ||
                    this.CashFlowDates != null &&
                    input.CashFlowDates != null &&
                    this.CashFlowDates.SequenceEqual(input.CashFlowDates)
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.IssueName == input.IssueName ||
                    (this.IssueName != null &&
                    this.IssueName.Equals(input.IssueName))
                ) && 
                (
                    this.ParAmt == input.ParAmt ||
                    this.ParAmt.Equals(input.ParAmt)
                ) && 
                (
                    this.ParentName == input.ParentName ||
                    (this.ParentName != null &&
                    this.ParentName.Equals(input.ParentName))
                ) && 
                (
                    this.RatingFitch == input.RatingFitch ||
                    (this.RatingFitch != null &&
                    this.RatingFitch.Equals(input.RatingFitch))
                ) && 
                (
                    this.RatingFitchDates == input.RatingFitchDates ||
                    this.RatingFitchDates != null &&
                    input.RatingFitchDates != null &&
                    this.RatingFitchDates.SequenceEqual(input.RatingFitchDates)
                ) && 
                (
                    this.RatingFitchValues == input.RatingFitchValues ||
                    this.RatingFitchValues != null &&
                    input.RatingFitchValues != null &&
                    this.RatingFitchValues.SequenceEqual(input.RatingFitchValues)
                ) && 
                (
                    this.RatingMoodysDates == input.RatingMoodysDates ||
                    this.RatingMoodysDates != null &&
                    input.RatingMoodysDates != null &&
                    this.RatingMoodysDates.SequenceEqual(input.RatingMoodysDates)
                ) && 
                (
                    this.RatingMoodysValues == input.RatingMoodysValues ||
                    this.RatingMoodysValues != null &&
                    input.RatingMoodysValues != null &&
                    this.RatingMoodysValues.SequenceEqual(input.RatingMoodysValues)
                ) && 
                (
                    this.RatingSpDates == input.RatingSpDates ||
                    this.RatingSpDates != null &&
                    input.RatingSpDates != null &&
                    this.RatingSpDates.SequenceEqual(input.RatingSpDates)
                ) && 
                (
                    this.RatingSpValues == input.RatingSpValues ||
                    this.RatingSpValues != null &&
                    input.RatingSpValues != null &&
                    this.RatingSpValues.SequenceEqual(input.RatingSpValues)
                ) && 
                (
                    this.SecondaryToVendorFlag == input.SecondaryToVendorFlag ||
                    this.SecondaryToVendorFlag.Equals(input.SecondaryToVendorFlag)
                ) && 
                (
                    this.Sector == input.Sector ||
                    (this.Sector != null &&
                    this.Sector.Equals(input.Sector))
                ) && 
                (
                    this.SectorBarclay1 == input.SectorBarclay1 ||
                    (this.SectorBarclay1 != null &&
                    this.SectorBarclay1.Equals(input.SectorBarclay1))
                ) && 
                (
                    this.SectorBarclay2 == input.SectorBarclay2 ||
                    (this.SectorBarclay2 != null &&
                    this.SectorBarclay2.Equals(input.SectorBarclay2))
                ) && 
                (
                    this.SectorBarclay3 == input.SectorBarclay3 ||
                    (this.SectorBarclay3 != null &&
                    this.SectorBarclay3.Equals(input.SectorBarclay3))
                ) && 
                (
                    this.SectorBarclay4 == input.SectorBarclay4 ||
                    (this.SectorBarclay4 != null &&
                    this.SectorBarclay4.Equals(input.SectorBarclay4))
                ) && 
                (
                    this.SectorDef == input.SectorDef ||
                    (this.SectorDef != null &&
                    this.SectorDef.Equals(input.SectorDef))
                ) && 
                (
                    this.SectorIndustry == input.SectorIndustry ||
                    (this.SectorIndustry != null &&
                    this.SectorIndustry.Equals(input.SectorIndustry))
                ) && 
                (
                    this.SectorMain == input.SectorMain ||
                    (this.SectorMain != null &&
                    this.SectorMain.Equals(input.SectorMain))
                ) && 
                (
                    this.SectorMerrill1 == input.SectorMerrill1 ||
                    (this.SectorMerrill1 != null &&
                    this.SectorMerrill1.Equals(input.SectorMerrill1))
                ) && 
                (
                    this.SectorMerrill2 == input.SectorMerrill2 ||
                    (this.SectorMerrill2 != null &&
                    this.SectorMerrill2.Equals(input.SectorMerrill2))
                ) && 
                (
                    this.SectorMerrill3 == input.SectorMerrill3 ||
                    (this.SectorMerrill3 != null &&
                    this.SectorMerrill3.Equals(input.SectorMerrill3))
                ) && 
                (
                    this.SectorMerrill4 == input.SectorMerrill4 ||
                    (this.SectorMerrill4 != null &&
                    this.SectorMerrill4.Equals(input.SectorMerrill4))
                ) && 
                (
                    this.SectorSubGroup == input.SectorSubGroup ||
                    (this.SectorSubGroup != null &&
                    this.SectorSubGroup.Equals(input.SectorSubGroup))
                ) && 
                (
                    this.VendorCoverageDate == input.VendorCoverageDate ||
                    (this.VendorCoverageDate != null &&
                    this.VendorCoverageDate.Equals(input.VendorCoverageDate))
                ) && 
                (
                    this.SecurityType == input.SecurityType ||
                    this.SecurityType.Equals(input.SecurityType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CashFlowAmounts != null)
                    hashCode = hashCode * 59 + this.CashFlowAmounts.GetHashCode();
                if (this.CashFlowDates != null)
                    hashCode = hashCode * 59 + this.CashFlowDates.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.IssueName != null)
                    hashCode = hashCode * 59 + this.IssueName.GetHashCode();
                hashCode = hashCode * 59 + this.ParAmt.GetHashCode();
                if (this.ParentName != null)
                    hashCode = hashCode * 59 + this.ParentName.GetHashCode();
                if (this.RatingFitch != null)
                    hashCode = hashCode * 59 + this.RatingFitch.GetHashCode();
                if (this.RatingFitchDates != null)
                    hashCode = hashCode * 59 + this.RatingFitchDates.GetHashCode();
                if (this.RatingFitchValues != null)
                    hashCode = hashCode * 59 + this.RatingFitchValues.GetHashCode();
                if (this.RatingMoodysDates != null)
                    hashCode = hashCode * 59 + this.RatingMoodysDates.GetHashCode();
                if (this.RatingMoodysValues != null)
                    hashCode = hashCode * 59 + this.RatingMoodysValues.GetHashCode();
                if (this.RatingSpDates != null)
                    hashCode = hashCode * 59 + this.RatingSpDates.GetHashCode();
                if (this.RatingSpValues != null)
                    hashCode = hashCode * 59 + this.RatingSpValues.GetHashCode();
                hashCode = hashCode * 59 + this.SecondaryToVendorFlag.GetHashCode();
                if (this.Sector != null)
                    hashCode = hashCode * 59 + this.Sector.GetHashCode();
                if (this.SectorBarclay1 != null)
                    hashCode = hashCode * 59 + this.SectorBarclay1.GetHashCode();
                if (this.SectorBarclay2 != null)
                    hashCode = hashCode * 59 + this.SectorBarclay2.GetHashCode();
                if (this.SectorBarclay3 != null)
                    hashCode = hashCode * 59 + this.SectorBarclay3.GetHashCode();
                if (this.SectorBarclay4 != null)
                    hashCode = hashCode * 59 + this.SectorBarclay4.GetHashCode();
                if (this.SectorDef != null)
                    hashCode = hashCode * 59 + this.SectorDef.GetHashCode();
                if (this.SectorIndustry != null)
                    hashCode = hashCode * 59 + this.SectorIndustry.GetHashCode();
                if (this.SectorMain != null)
                    hashCode = hashCode * 59 + this.SectorMain.GetHashCode();
                if (this.SectorMerrill1 != null)
                    hashCode = hashCode * 59 + this.SectorMerrill1.GetHashCode();
                if (this.SectorMerrill2 != null)
                    hashCode = hashCode * 59 + this.SectorMerrill2.GetHashCode();
                if (this.SectorMerrill3 != null)
                    hashCode = hashCode * 59 + this.SectorMerrill3.GetHashCode();
                if (this.SectorMerrill4 != null)
                    hashCode = hashCode * 59 + this.SectorMerrill4.GetHashCode();
                if (this.SectorSubGroup != null)
                    hashCode = hashCode * 59 + this.SectorSubGroup.GetHashCode();
                if (this.VendorCoverageDate != null)
                    hashCode = hashCode * 59 + this.VendorCoverageDate.GetHashCode();
                hashCode = hashCode * 59 + this.SecurityType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
