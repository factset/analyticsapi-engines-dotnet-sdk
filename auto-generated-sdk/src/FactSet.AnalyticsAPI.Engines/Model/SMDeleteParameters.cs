/*
 * Engines API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: v3:[pa,vault,pub,quant,fi,axp,afi,npo,bpm,fpo,security-modeling,others],v1:[fiab]
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.AnalyticsAPI.Engines.Client.OpenAPIDateConverter;

namespace FactSet.AnalyticsAPI.Engines.Model
{
    /// <summary>
    /// SMDeleteParameters
    /// </summary>
    [DataContract(Name = "SMDeleteParameters")]
    public partial class SMDeleteParameters : IEquatable<SMDeleteParameters>, IValidatableObject
    {
        /// <summary>
        /// Defines SecurityType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SecurityTypeEnum
        {
            /// <summary>
            /// Enum Bond for value: Bond
            /// </summary>
            [EnumMember(Value = "Bond")]
            Bond = 1,

            /// <summary>
            /// Enum CCF for value: CCF
            /// </summary>
            [EnumMember(Value = "CCF")]
            CCF = 2

        }

        /// <summary>
        /// Gets or Sets SecurityType
        /// </summary>
        [DataMember(Name = "securityType", EmitDefaultValue = false)]
        public SecurityTypeEnum? SecurityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SMDeleteParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SMDeleteParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SMDeleteParameters" /> class.
        /// </summary>
        /// <param name="securityName">securityName (required).</param>
        /// <param name="location">location.</param>
        /// <param name="asofdate">asofdate.</param>
        /// <param name="securityType">securityType.</param>
        public SMDeleteParameters(string securityName = default(string), string location = default(string), string asofdate = default(string), SecurityTypeEnum? securityType = default(SecurityTypeEnum?))
        {
            // to ensure "securityName" is required (not null)
            this.SecurityName = securityName ?? throw new ArgumentNullException("securityName is a required property for SMDeleteParameters and cannot be null");
            this.Location = location;
            this.Asofdate = asofdate;
            this.SecurityType = securityType;
        }

        /// <summary>
        /// Gets or Sets SecurityName
        /// </summary>
        [DataMember(Name = "securityName", IsRequired = true, EmitDefaultValue = false)]
        public string SecurityName { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets Asofdate
        /// </summary>
        [DataMember(Name = "asofdate", EmitDefaultValue = false)]
        public string Asofdate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SMDeleteParameters {\n");
            sb.Append("  SecurityName: ").Append(SecurityName).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Asofdate: ").Append(Asofdate).Append("\n");
            sb.Append("  SecurityType: ").Append(SecurityType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SMDeleteParameters);
        }

        /// <summary>
        /// Returns true if SMDeleteParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of SMDeleteParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SMDeleteParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SecurityName == input.SecurityName ||
                    (this.SecurityName != null &&
                    this.SecurityName.Equals(input.SecurityName))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Asofdate == input.Asofdate ||
                    (this.Asofdate != null &&
                    this.Asofdate.Equals(input.Asofdate))
                ) && 
                (
                    this.SecurityType == input.SecurityType ||
                    this.SecurityType.Equals(input.SecurityType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SecurityName != null)
                    hashCode = hashCode * 59 + this.SecurityName.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Asofdate != null)
                    hashCode = hashCode * 59 + this.Asofdate.GetHashCode();
                hashCode = hashCode * 59 + this.SecurityType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
