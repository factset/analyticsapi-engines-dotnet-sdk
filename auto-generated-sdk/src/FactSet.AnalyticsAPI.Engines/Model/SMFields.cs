/*
 * Engines API
 *
 * Allow clients to fetch Analytics through APIs.
 *
 * The version of the OpenAPI document: v3:[pa,vault,pub,quant,fi,axp,afi,npo,bpm,fpo,security-modeling,others],v1:[fiab]
 * Contact: api@factset.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FactSet.AnalyticsAPI.Engines.Client.OpenAPIDateConverter;

namespace FactSet.AnalyticsAPI.Engines.Model
{
    /// <summary>
    /// SMFields
    /// </summary>
    [DataContract(Name = "SMFields")]
    public partial class SMFields : IEquatable<SMFields>, IValidatableObject
    {
        /// <summary>
        /// Defines SecurityType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SecurityTypeEnum
        {
            /// <summary>
            /// Enum Bond for value: Bond
            /// </summary>
            [EnumMember(Value = "Bond")]
            Bond = 1,

            /// <summary>
            /// Enum CCF for value: CCF
            /// </summary>
            [EnumMember(Value = "CCF")]
            CCF = 2

        }

        /// <summary>
        /// Gets or Sets SecurityType
        /// </summary>
        [DataMember(Name = "securityType", IsRequired = true, EmitDefaultValue = false)]
        public SecurityTypeEnum SecurityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SMFields" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SMFields() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SMFields" /> class.
        /// </summary>
        /// <param name="securityType">securityType (required).</param>
        public SMFields(SecurityTypeEnum securityType = default(SecurityTypeEnum))
        {
            this.SecurityType = securityType;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SMFields {\n");
            sb.Append("  SecurityType: ").Append(SecurityType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SMFields);
        }

        /// <summary>
        /// Returns true if SMFields instances are equal
        /// </summary>
        /// <param name="input">Instance of SMFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SMFields input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SecurityType == input.SecurityType ||
                    this.SecurityType.Equals(input.SecurityType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.SecurityType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
